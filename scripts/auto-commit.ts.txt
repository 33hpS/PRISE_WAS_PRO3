#!/usr/bin/env tsx
/**
 * @file auto-commit.ts
 * @description –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∞–≤—Ç–æ–∫–æ–º–º–∏—Ç –¥–ª—è –º–µ–±–µ–ª—å–Ω–æ–π —Ñ–∞–±—Ä–∏–∫–∏ WASSER
 * –ß–∏—Å—Ç–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ —Å –∏–º–º—É—Ç–∞–±–µ–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∏ —Ç–∏–ø–æ–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å—é
 */

import { execSync } from 'child_process'

// ===== –§–£–ù–ö–¶–ò–û–ù–ê–õ–¨–ù–´–ï –¢–ò–ü–´ –î–õ–Ø –ú–ï–ë–ï–õ–¨–ù–û–ô –§–ê–ë–†–ò–ö–ò =====

type CommitType = 'auto' | 'feature' | 'fix' | 'refactor' | 'docs' | 'style' | 'feat'
type FurnitureScope = 
  | 'general' 
  | 'components' 
  | 'materials' 
  | 'pricing' 
  | 'pdf' 
  | 'collections' 
  | 'furniture'
  | 'api'

interface CommitConfiguration {
  readonly type: CommitType
  readonly scope: FurnitureScope
  readonly message: string
  readonly dryRun?: boolean
  readonly skipHooks?: boolean
}

interface CommitMetadata {
  readonly timestamp: string
  readonly branch: string
  readonly hasChanges: boolean
  readonly changeCount: number
}

// ===== –ö–û–ù–°–¢–ê–ù–¢–´ –° –ò–ú–ú–£–¢–ê–ë–ï–õ–¨–ù–û–°–¢–¨–Æ =====

const FURNITURE_COMMIT_EMOJIS: Readonly<Record<CommitType, string>> = Object.freeze({
  auto: 'ü§ñ',
  feature: '‚ú®',
  feat: '‚ú®',
  fix: 'üêõ',
  refactor: '‚ôªÔ∏è',
  docs: 'üìù',
  style: 'üíÑ',
} as const)

const FURNITURE_SCOPE_EMOJIS: Readonly<Record<FurnitureScope, string>> = Object.freeze({
  general: 'üîÑ',
  components: 'üß©',
  materials: 'üèóÔ∏è',
  pricing: 'üí∞',
  pdf: 'üìÑ',
  collections: 'üé®',
  furniture: 'ü™ë',
  api: 'üîß',
} as const)

// ===== –ß–ò–°–¢–´–ï –§–£–ù–ö–¶–ò–ò –£–¢–ò–õ–ò–¢–´ =====

/**
 * –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã —Å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º –ø–æ–¥—Ö–æ–¥–æ–º
 */
const safeExecute = (command: string): { success: boolean; output: string } => {
  try {
    const output = execSync(command, { encoding: 'utf8', stdio: 'pipe' })
    return { success: true, output: output.trim() }
  } catch (error) {
    return { success: false, output: error instanceof Error ? error.message : 'Unknown error' }
  }
}

/**
 * –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
 */
const analyzeGitChanges = (): CommitMetadata => {
  const branch = safeExecute('git rev-parse --abbrev-ref HEAD').output || 'unknown'
  
  const unstagedResult = safeExecute('git diff --numstat')
  const stagedResult = safeExecute('git diff --staged --numstat')
  
  const changeCount = 
    (unstagedResult.output?.split('\n').filter(Boolean).length || 0) +
    (stagedResult.output?.split('\n').filter(Boolean).length || 0)

  return Object.freeze({
    timestamp: new Date().toISOString(),
    branch,
    hasChanges: changeCount > 0,
    changeCount,
  })
}

/**
 * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º –ø–æ–¥—Ö–æ–¥–æ–º
 */
const generateSemanticMessage = (
  config: CommitConfiguration,
  metadata: CommitMetadata
): string => {
  const typeEmoji = FURNITURE_COMMIT_EMOJIS[config.type]
  const scopeEmoji = FURNITURE_SCOPE_EMOJIS[config.scope]
  
  // –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –∫–æ–º–ø–æ–∑–∏—Ü–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–∞
  const header = `${typeEmoji} ${scopeEmoji} ${config.type}(${config.scope}): ${config.message}`
  
  const bodyParts = [
    '',
    'üèóÔ∏è WASSER –ú–µ–±–µ–ª—å–Ω–∞—è —Ñ–∞–±—Ä–∏–∫–∞ - –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è',
    `‚è∞ –í—Ä–µ–º—è: ${new Date(metadata.timestamp).toLocaleString('ru-RU', {
      timeZone: 'Asia/Bishkek',
      dateStyle: 'short',
      timeStyle: 'short',
    })}`,
    `üåø –í–µ—Ç–∫–∞: ${metadata.branch}`,
    `üìä –ò–∑–º–µ–Ω–µ–Ω–∏–π: ${metadata.changeCount}`,
    `üéØ –û–±–ª–∞—Å—Ç—å: ${config.scope}`,
    '',
    '‚ú® –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ —Å —Ç–∏–ø–æ–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å—é',
    'üß© –ú–æ–¥—É–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –∫ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º –º–µ–±–µ–ª—å–Ω–æ–≥–æ –∫–∞—Ç–∞–ª–æ–≥–∞',
  ].filter(Boolean)

  return [header, ...bodyParts].join('\n')
}

// ===== –û–°–ù–û–í–ù–´–ï –§–£–ù–ö–¶–ò–û–ù–ê–õ–¨–ù–´–ï –û–ü–ï–†–ê–¶–ò–ò =====

/**
 * –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ñ–∞–π–ª–æ–≤ –∫ –∫–æ–º–º–∏—Ç—É —Å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º –ø–æ–¥—Ö–æ–¥–æ–º
 */
const prepareFilesForCommit = (): boolean => {
  console.log('üì¶ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∫–æ–º–º–∏—Ç–∞...')
  
  const result = safeExecute('git add .')
  if (!result.success) {
    console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Ñ–∞–π–ª—ã:', result.output)
    return false
  }
  
  console.log('‚úÖ –§–∞–π–ª—ã —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ staging area')
  return true
}

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–º–∏—Ç–∞ —Å —Ç–∏–ø–æ–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å—é
 */
const createCommit = (message: string): boolean => {
  console.log('üíæ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∏–ø–æ–±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –∫–æ–º–º–∏—Ç–∞...')
  
  // –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
  const escapedMessage = message.replace(/"/g, '\\"').replace(/`/g, '\\`')
  const result = safeExecute(`git commit -m "${escapedMessage}"`)
  
  if (!result.success) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–º–∏—Ç–∞:', result.output)
    return false
  }
  
  console.log('‚úÖ –ö–æ–º–º–∏—Ç —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ')
  return true
}

/**
 * –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∞–≤—Ç–æ–∫–æ–º–º–∏—Ç–∞
 */
const executeAutoCommit = async (config: CommitConfiguration): Promise<boolean> => {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –∞–≤—Ç–æ–∫–æ–º–º–∏—Ç–∞ WASSER...')
  console.log('‚öôÔ∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:', {
    —Ç–∏–ø: config.type,
    –æ–±–ª–∞—Å—Ç—å: config.scope,
    —Å–æ–æ–±—â–µ–Ω–∏–µ: config.message,
    dryRun: config.dryRun || false,
  })

  // –ê–Ω–∞–ª–∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º –ø–æ–¥—Ö–æ–¥–æ–º  
  const metadata = analyzeGitChanges()
  
  if (!metadata.hasChanges) {
    console.log('‚ö†Ô∏è –ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è –∫–æ–º–º–∏—Ç–∞')
    return false
  }

  console.log(`üìä –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∏–π: ${metadata.changeCount}`)

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–º–º—É—Ç–∞–±–µ–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
  const commitMessage = generateSemanticMessage(config, metadata)

  if (config.dryRun) {
    console.log('üîç DRY RUN - –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä:')
    console.log('‚îÄ'.repeat(50))
    console.log(commitMessage)
    console.log('‚îÄ'.repeat(50))
    return true
  }

  // –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è —Ü–µ–ø–æ—á–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏–π
  const operations = [
    () => prepareFilesForCommit(),
    () => createCommit(commitMessage),
  ] as const

  // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏
  for (const operation of operations) {
    const success = operation()
    if (!success) {
      console.error('‚ùå –ê–≤—Ç–æ–∫–æ–º–º–∏—Ç –ø—Ä–µ—Ä–≤–∞–Ω –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏')
      return false
    }
  }

  console.log('üéâ –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∞–≤—Ç–æ–∫–æ–º–º–∏—Ç WASSER –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!')
  console.log(`üìù –¢–∏–ø: ${config.type}(${config.scope})`)
  console.log(`üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ: ${config.message}`)

  return true
}

// ===== –¢–ò–ü–û–ë–ï–ó–û–ü–ê–°–ù–´–ô CLI –ò–ù–¢–ï–†–§–ï–ô–° =====

/**
 * –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ —Å —Ç–∏–ø–æ–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å—é
 */
const parseCliArguments = (args: readonly string[]): CommitConfiguration => {
  const [type = 'auto', scope = 'general', message = '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞', ...flags] = args

  return Object.freeze({
    type: type as CommitType,
    scope: scope as FurnitureScope,
    message,
    dryRun: flags.includes('--dry-run'),
    skipHooks: flags.includes('--skip-hooks'),
  })
}

const displayFunctionalHelp = (): void => {
  const helpContent = `
üèóÔ∏è WASSER Auto Commit - –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∞–≤—Ç–æ–∫–æ–º–º–∏—Ç —Å —Ç–∏–ø–æ–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å—é

üìã –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
  tsx scripts/auto-commit.ts [—Ç–∏–ø] [–æ–±–ª–∞—Å—Ç—å] [—Å–æ–æ–±—â–µ–Ω–∏–µ] [—Ñ–ª–∞–≥–∏]

üéØ –¢–∏–ø—ã –∫–æ–º–º–∏—Ç–æ–≤ –¥–ª—è –º–µ–±–µ–ª—å–Ω–æ–π —Ñ–∞–±—Ä–∏–∫–∏:
  auto     ü§ñ - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞
  feature  ‚ú® - –ù–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ (–∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã, –º–∞—Ç–µ—Ä–∏–∞–ª—ã)
  fix      üêõ - –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è (–±–∞–≥—Ñ–∏–∫—Å—ã, —Ä–∞—Å—á–µ—Ç—ã)
  refactor ‚ôªÔ∏è  - –†–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ –∫–æ–¥–∞ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è API
  docs     üìù - –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
  style    üíÑ - –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ, —Å—Ç–∏–ª–∏

üèóÔ∏è –û–±–ª–∞—Å—Ç–∏ –º–µ–±–µ–ª—å–Ω–æ–π —Ñ–∞–±—Ä–∏–∫–∏:
  components  üß© - React –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∫–∞—Ç–∞–ª–æ–≥–∞ –º–µ–±–µ–ª–∏
  materials   üèóÔ∏è - –°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º–∏  
  pricing     üí∞ - –ê–ª–≥–æ—Ä–∏—Ç–º—ã —Ü–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
  pdf         üìÑ - –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–æ–≤
  collections üé® - –ú–µ–±–µ–ª—å–Ω—ã–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
  furniture   ü™ë - –¢–∏–ø—ã –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –º–µ–±–µ–ª–∏
  api         üîß - Backend –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è
  general     üîÑ - –û–±—â–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è

üöÄ –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
  tsx scripts/auto-commit.ts feature components "–ù–æ–≤—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –º–µ–±–µ–ª—å–Ω–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏"
  tsx scripts/auto-commit.ts fix pricing "–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—á–µ—Ç–∞ —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏" 
  tsx scripts/auto-commit.ts refactor materials "–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤"
  tsx scripts/auto-commit.ts auto general "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞" --dry-run

üéõÔ∏è –§–ª–∞–≥–∏:
  --dry-run     –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –±–µ–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
  --skip-hooks  –ü—Ä–æ–ø—É—Å–∫ Git —Ö—É–∫–æ–≤ (–Ω–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)

‚ú® –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã:
  ‚Ä¢ –ò–º–º—É—Ç–∞–±–µ–ª—å–Ω—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö
  ‚Ä¢ –ß–∏—Å—Ç—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–µ–∑ –ø–æ–±–æ—á–Ω—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤  
  ‚Ä¢ –¢–∏–ø–æ–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –Ω–∞ –≤—Å–µ—Ö —É—Ä–æ–≤–Ω—è—Ö
  ‚Ä¢ –ö–æ–º–ø–æ–∑–∏—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è —Å–ª–æ–∂–Ω–æ–π –ª–æ–≥–∏–∫–∏
  ‚Ä¢ –ú–æ–¥—É–ª—å–Ω–æ—Å—Ç—å –∏ –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞
  `

  console.log(helpContent)
}

// ===== –¢–û–ß–ö–ê –í–•–û–î–ê –° –û–ë–†–ê–ë–û–¢–ö–û–ô –û–®–ò–ë–û–ö =====

async function main(): Promise<void> {
  const args = process.argv.slice(2)

  // –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ help –∫–æ–º–∞–Ω–¥
  if (args.some(arg => ['--help', '-h', 'help'].includes(arg))) {
    displayFunctionalHelp()
    return
  }

  try {
    const config = parseCliArguments(args)
    const success = await executeAutoCommit(config)
    process.exit(success ? 0 : 1)
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –∞–≤—Ç–æ–∫–æ–º–º–∏—Ç–∞:', error)
    process.exit(1)
  }
}

// –ó–∞–ø—É—Å–∫ –ø—Ä–∏ –ø—Ä—è–º–æ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏
if (import.meta.url === `file://${process.argv[1]}`) {
  main().catch(console.error)
}

// ===== –≠–ö–°–ü–û–†–¢ –î–õ–Ø –ú–û–î–£–õ–¨–ù–û–ì–û –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø =====
export { executeAutoCommit, generateSemanticMessage, analyzeGitChanges }
export type { CommitConfiguration, CommitMetadata, CommitType, FurnitureScope }