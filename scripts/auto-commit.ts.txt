// scripts/auto-commit.ts
// –¢–∏–ø–æ–±–µ–∑–æ–ø–∞—Å–Ω–∞—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –∫–æ–º–º–∏—Ç–æ–≤ –¥–ª—è –º–µ–±–µ–ª—å–Ω–æ–π —Ñ–∞–±—Ä–∏–∫–∏ WASSER

import { execSync } from 'child_process';
import fs from 'fs/promises';
import path from 'path';

// ===== –¢–ò–ü–´ –î–õ–Ø –ê–í–¢–û–ú–ê–¢–ò–ó–ê–¶–ò–ò =====

interface CommitConfig {
  readonly type: 'feature' | 'fix' | 'refactor' | 'docs' | 'style' | 'auto';
  readonly scope: 'components' | 'materials' | 'pricing' | 'pdf' | 'api' | 'general';
  readonly message: string;
  readonly skipHooks?: boolean;
  readonly dryRun?: boolean;
}

interface ProjectMetrics {
  readonly version: string;
  readonly componentsCount: number;
  readonly linesOfCode: number;
  readonly typesCoverage: number;
  readonly lastUpdate: string;
}

interface ChangeAnalysis {
  readonly hasChanges: boolean;
  readonly changeType: 'breaking' | 'minor' | 'patch';
  readonly affectedAreas: readonly string[];
  readonly riskLevel: 'low' | 'medium' | 'high';
}

// ===== –ö–û–ù–°–¢–ê–ù–¢–´ –° –¢–ò–ü–ò–ó–ê–¶–ò–ï–ô =====

const COMMIT_PREFIXES = {
  feature: '‚ú®',
  fix: 'üêõ', 
  refactor: '‚ôªÔ∏è',
  docs: 'üìù',
  style: 'üíÑ',
  auto: 'ü§ñ'
} as const;

const SCOPE_EMOJIS = {
  components: 'üß©',
  materials: 'üèóÔ∏è', 
  pricing: 'üí∞',
  pdf: 'üìÑ',
  api: 'üîß',
  general: 'üîÑ'
} as const;

// ===== –ß–ò–°–¢–´–ï –§–£–ù–ö–¶–ò–ò –ê–ù–ê–õ–ò–ó–ê =====

/**
 * –¢–∏–ø–æ–±–µ–∑–æ–ø–∞—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –ø—Ä–æ–µ–∫—Ç–µ
 */
const analyzeChanges = async (): Promise<ChangeAnalysis> => {
  try {
    const gitStatus = execSync('git status --porcelain', { encoding: 'utf8' });
    const hasChanges = gitStatus.trim().length > 0;
    
    if (!hasChanges) {
      return {
        hasChanges: false,
        changeType: 'patch',
        affectedAreas: [],
        riskLevel: 'low'
      };
    }

    const changedFiles = gitStatus
      .split('\n')
      .filter(line => line.trim())
      .map(line => line.substring(3));
    
    const affectedAreas = Array.from(new Set(
      changedFiles
        .filter(file => file.startsWith('src/'))
        .map(file => {
          if (file.includes('components/')) return 'components';
          if (file.includes('lib/calc')) return 'pricing';
          if (file.includes('lib/pdf')) return 'pdf';
          if (file.includes('materials')) return 'materials';
          if (file.includes('api') || file.includes('supabase')) return 'api';
          return 'general';
        })
    ));

    // –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è
    const changeType = (() => {
      if (changedFiles.some(f => f.includes('package.json'))) return 'minor' as const;
      if (affectedAreas.includes('api')) return 'minor' as const;
      return 'patch' as const;
    })();

    // –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ —Ä–∏—Å–∫–∞
    const riskLevel = (() => {
      if (affectedAreas.includes('api') || changeType === 'minor') return 'medium' as const;
      if (affectedAreas.length > 2) return 'medium' as const;
      return 'low' as const;
    })();

    return {
      hasChanges,
      changeType,
      affectedAreas,
      riskLevel
    };
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π:', error);
    return {
      hasChanges: false,
      changeType: 'patch',
      affectedAreas: [],
      riskLevel: 'low'
    };
  }
};

/**
 * –°–±–æ—Ä –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–µ–∫—Ç–∞ —Å —Ç–∏–ø–æ–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å—é
 */
const collectProjectMetrics = async (): Promise<ProjectMetrics> => {
  try {
    // –ß—Ç–µ–Ω–∏–µ –≤–µ—Ä—Å–∏–∏ –∏–∑ package.json
    const packageJson = JSON.parse(
      await fs.readFile('package.json', 'utf8')
    );
    const version = packageJson.version || '1.0.0';

    // –ü–æ–¥—Å—á–µ—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    const componentsDir = path.join('src', 'components');
    const componentFiles = await fs.readdir(componentsDir);
    const componentsCount = componentFiles.filter(f => 
      f.endsWith('.tsx') && !f.includes('.test.')
    ).length;

    // –ü–æ–¥—Å—á–µ—Ç —Å—Ç—Ä–æ–∫ –∫–æ–¥–∞ (—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥)
    const linesOfCode = execSync(
      "find src -name '*.ts' -o -name '*.tsx' | xargs wc -l | tail -1 | awk '{print $1}'",
      { encoding: 'utf8' }
    ).trim();

    // TypeScript –ø–æ–∫—Ä—ã—Ç–∏–µ (–ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ)
    const typesCoverage = 95; // –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å type-coverage

    return {
      version,
      componentsCount,
      linesOfCode: parseInt(linesOfCode, 10) || 0,
      typesCoverage,
      lastUpdate: new Date().toISOString()
    };
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ –º–µ—Ç—Ä–∏–∫:', error);
    return {
      version: '1.0.0',
      componentsCount: 0,
      linesOfCode: 0,
      typesCoverage: 0,
      lastUpdate: new Date().toISOString()
    };
  }
};

/**
 * –¢–∏–ø–æ–±–µ–∑–æ–ø–∞—Å–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –∫–æ–º–º–∏—Ç–∞
 */
const generateCommitMessage = (
  config: CommitConfig, 
  analysis: ChangeAnalysis, 
  metrics: ProjectMetrics
): string => {
  const prefix = COMMIT_PREFIXES[config.type];
  const scopeEmoji = SCOPE_EMOJIS[config.scope];
  
  // –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –∫–æ–º–ø–æ–∑–∏—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
  const header = `${prefix} ${scopeEmoji} ${config.message}`;
  
  const body = [
    '',
    'üèóÔ∏è –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è WASSER:',
    `- –í–µ—Ä—Å–∏—è: ${metrics.version}`,
    `- –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã: ${metrics.componentsCount}`,
    `- –°—Ç—Ä–æ–∫ –∫–æ–¥–∞: ${metrics.linesOfCode.toLocaleString('ru-RU')}`,
    `- TypeScript –ø–æ–∫—Ä—ã—Ç–∏–µ: ${metrics.typesCoverage}%`,
    '',
    'üìä –ê–Ω–∞–ª–∏–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π:',
    `- –¢–∏–ø: ${analysis.changeType}`,
    `- –û–±–ª–∞—Å—Ç—å: ${analysis.affectedAreas.join(', ')}`,
    `- –†–∏—Å–∫: ${analysis.riskLevel}`,
    '',
    `‚è∞ –í—Ä–µ–º—è: ${new Date().toLocaleString('ru-RU')}`
  ].join('\n');

  return header + body;
};

/**
 * –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–∏–ø–æ–±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –∫–æ–º–º–∏—Ç–∞
 */
const executeCommit = async (config: CommitConfig): Promise<boolean> => {
  try {
    console.log('üîç –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–µ–∫—Ç–∞ WASSER...');
    const [analysis, metrics] = await Promise.all([
      analyzeChanges(),
      collectProjectMetrics()
    ]);

    if (!analysis.hasChanges) {
      console.log('‚ö†Ô∏è –ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è –∫–æ–º–º–∏—Ç–∞');
      return false;
    }

    console.log('üìä –ú–µ—Ç—Ä–∏–∫–∏ —Å–æ–±—Ä–∞–Ω—ã:', metrics);
    console.log('üî¨ –ê–Ω–∞–ª–∏–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π:', analysis);

    const commitMessage = generateCommitMessage(config, analysis, metrics);
    
    if (config.dryRun) {
      console.log('üîç DRY RUN - –°–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–º–∏—Ç–∞:');
      console.log(commitMessage);
      return true;
    }

    // –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫–æ–º–∞–Ω–¥ Git
    const gitCommands = [
      'git add .',
      `git commit -m "${commitMessage.replace(/"/g, '\\"')}"`,
      ...(config.skipHooks ? [] : ['git push origin HEAD'])
    ];

    for (const command of gitCommands) {
      console.log(`üöÄ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ: ${command}`);
      execSync(command, { stdio: 'inherit' });
    }

    console.log('‚úÖ –ê–≤—Ç–æ–∫–æ–º–º–∏—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
    return true;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–∫–æ–º–º–∏—Ç–∞:', error);
    return false;
  }
};

// ===== –≠–ö–°–ü–û–†–¢ –§–£–ù–ö–¶–ò–ô =====

export {
  analyzeChanges,
  collectProjectMetrics,
  generateCommitMessage,
  executeCommit
};

export type {
  CommitConfig,
  ProjectMetrics,
  ChangeAnalysis
};

// ===== CLI –ò–ù–¢–ï–†–§–ï–ô–° =====

async function main() {
  const args = process.argv.slice(2);
  const [type = 'auto', scope = 'general', message = '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞'] = args;

  const config: CommitConfig = {
    type: type as CommitConfig['type'],
    scope: scope as CommitConfig['scope'], 
    message,
    dryRun: args.includes('--dry-run'),
    skipHooks: args.includes('--skip-hooks')
  };

  console.log('ü§ñ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–∫–æ–º–º–∏—Ç–∞ WASSER...');
  console.log('‚öôÔ∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:', config);

  const success = await executeCommit(config);
  process.exit(success ? 0 : 1);
}

// –ó–∞–ø—É—Å–∫ –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  main().catch(console.error);
}