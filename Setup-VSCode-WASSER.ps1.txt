# ===== –ü–†–Ø–ú–û–ï –°–û–ó–î–ê–ù–ò–ï VS CODE –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò =====

Write-Host "üöÄ –°–æ–∑–¥–∞–Ω–∏–µ VS Code –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è –º–µ–±–µ–ª—å–Ω–æ–π —Ñ–∞–±—Ä–∏–∫–∏ WASSER..." -ForegroundColor Magenta

# –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
New-Item -ItemType Directory -Path ".vscode" -Force | Out-Null
New-Item -ItemType Directory -Path ".vscode\snippets" -Force | Out-Null
Write-Host "‚úÖ –°–æ–∑–¥–∞–Ω—ã –ø–∞–ø–∫–∏ .vscode –∏ .vscode\snippets" -ForegroundColor Green

# 1. extensions.json - —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
$extensionsJson = @'
{
  "recommendations": [
    "bradlc.vscode-tailwindcss",
    "esbenp.prettier-vscode",
    "ms-vscode.vscode-typescript-next",
    "formulahendry.auto-rename-tag",
    "christian-kohler.path-intellisense",
    "dsznajder.es7-react-js-snippets",
    "steoates.autoimport",
    "usernamehw.errorlens",
    "eamodio.gitlens"
  ],
  "unwantedRecommendations": [
    "ms-vscode.vscode-typescript",
    "hookyqr.beautify"
  ]
}
'@

Set-Content ".vscode\extensions.json" $extensionsJson -Encoding UTF8
Write-Host "‚úÖ –°–æ–∑–¥–∞–Ω extensions.json —Å —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–º–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è–º–∏" -ForegroundColor Green

# 2. settings.json - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ workspace –¥–ª—è —Ç–∏–ø–æ–±–µ–∑–æ–ø–∞—Å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
$settingsJson = @'
{
  "typescript.preferences.importModuleSpecifier": "relative",
  "typescript.preferences.quoteStyle": "single",
  "typescript.suggest.autoImports": true,
  "typescript.updateImportsOnFileMove.enabled": "always",
  
  "editor.defaultFormatter": "esbenp.prettier-vscode",
  "editor.formatOnSave": true,
  "editor.codeActionsOnSave": {
    "source.organizeImports": true,
    "source.fixAll.eslint": true,
    "source.addMissingImports": true
  },
  
  "tailwindCSS.includeLanguages": {
    "typescript": "html",
    "typescriptreact": "html"
  },
  "tailwindCSS.experimental.classRegex": [
    ["className.*?=.*?[\"']([^\"']*)[\"']", "[\"']([^\"']*)[\"']"]
  ],
  
  "emmet.includeLanguages": {
    "typescript": "html",
    "typescriptreact": "html"
  },
  
  "editor.tabSize": 2,
  "editor.insertSpaces": true,
  "editor.snippetSuggestions": "top",
  "files.autoSave": "onWindowChange",
  
  "files.associations": {
    "*.sql": "sql",
    "*.tsx": "typescriptreact"
  }
}
'@

Set-Content ".vscode\settings.json" $settingsJson -Encoding UTF8
Write-Host "‚úÖ –°–æ–∑–¥–∞–Ω settings.json —Å —Ç–∏–ø–æ–±–µ–∑–æ–ø–∞—Å–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏" -ForegroundColor Green

# 3. tasks.json - –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
$tasksJson = @'
{
  "version": "2.0.0",
  "tasks": [
    {
      "label": "üöÄ Dev Server",
      "type": "shell",
      "command": "npm",
      "args": ["run", "dev"],
      "group": "build",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "panel": "new"
      }
    },
    {
      "label": "üèóÔ∏è Build Production",
      "type": "shell",
      "command": "npm",
      "args": ["run", "build"],
      "group": {
        "kind": "build",
        "isDefault": true
      }
    },
    {
      "label": "üîç Type Check",
      "type": "shell",
      "command": "npx",
      "args": ["tsc", "--noEmit"],
      "group": "test"
    },
    {
      "label": "‚ú® Format Code",
      "type": "shell",
      "command": "npx",
      "args": ["prettier", "--write", "src/**/*.{ts,tsx}"],
      "group": "build"
    }
  ]
}
'@

Set-Content ".vscode\tasks.json" $tasksJson -Encoding UTF8
Write-Host "‚úÖ –°–æ–∑–¥–∞–Ω tasks.json —Å –∑–∞–¥–∞—á–∞–º–∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏" -ForegroundColor Green

# 4. launch.json - –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ—Ç–ª–∞–¥–∫–∏
$launchJson = @'
{
  "version": "0.2.0",
  "configurations": [
    {
      "name": "üåê Launch Chrome",
      "type": "chrome",
      "request": "launch",
      "url": "http://localhost:5173",
      "webRoot": "${workspaceFolder}/src",
      "sourceMaps": true
    }
  ]
}
'@

Set-Content ".vscode\launch.json" $launchJson -Encoding UTF8
Write-Host "‚úÖ –°–æ–∑–¥–∞–Ω launch.json –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏" -ForegroundColor Green

# 5. furniture.code-snippets - —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–Ω–∏–ø–ø–µ—Ç—ã –¥–ª—è –º–µ–±–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞
$furnitureSnippets = @'
{
  "Furniture Component": {
    "prefix": "fcomp",
    "body": [
      "interface ${1:Component}Props {",
      "  article: string;",
      "  name: string;",
      "  collection: string;",
      "  price: number;",
      "  materials: string[];",
      "}",
      "",
      "const ${1:Component}: React.FC<${1:Component}Props> = React.memo(({",
      "  article,",
      "  name,",
      "  collection,",
      "  price,",
      "  materials",
      "}) => {",
      "  const calculatedPrice = useMemo(() => {",
      "    const collectionMultiplier = getCollectionMultiplier(collection);",
      "    return price * collectionMultiplier;",
      "  }, [price, collection]);",
      "",
      "  return (",
      "    <div className=\"${2:p-4 border rounded-lg bg-white shadow-sm}\">",
      "      <h3 className=\"font-semibold text-lg\">{name}</h3>",
      "      <p className=\"text-gray-600\">–ê—Ä—Ç–∏–∫—É–ª: {article}</p>",
      "      <p className=\"text-blue-600\">–ö–æ–ª–ª–µ–∫—Ü–∏—è: {collection}</p>",
      "      <p className=\"text-sm text-gray-500\">",
      "        –ú–∞—Ç–µ—Ä–∏–∞–ª—ã: {materials.join(', ')}",
      "      </p>",
      "      <p className=\"font-bold text-green-600\">",
      "        –¶–µ–Ω–∞: {calculatedPrice.toLocaleString('ru-RU')} ‚ÇΩ",
      "      </p>",
      "      $0",
      "    </div>",
      "  );",
      "});"
    ],
    "description": "–¢–∏–ø–æ–±–µ–∑–æ–ø–∞—Å–Ω—ã–π React-–∫–æ–º–ø–æ–Ω–µ–Ω—Ç –º–µ–±–µ–ª–∏ —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π"
  },

  "Price List Generator": {
    "prefix": "pricegen",
    "body": [
      "const generatePriceList = useCallback((items: ${1:FurnitureItem}[]) => {",
      "  const doc = new jsPDF();",
      "  let yPosition = 20;",
      "",
      "  // –ó–∞–≥–æ–ª–æ–≤–æ–∫",
      "  doc.setFontSize(18);",
      "  doc.text('–ü—Ä–∞–π—Å-–ª–∏—Å—Ç WASSER', 10, yPosition);",
      "  yPosition += 15;",
      "",
      "  // –î–∞—Ç–∞",
      "  doc.setFontSize(10);",
      "  doc.text(`–î–∞—Ç–∞: ${new Date().toLocaleDateString('ru-RU')}`, 10, yPosition);",
      "  yPosition += 20;",
      "",
      "  // –¢–æ–≤–∞—Ä—ã",
      "  doc.setFontSize(12);",
      "  items.forEach((item, index) => {",
      "    const line = `${index + 1}. ${item.name} (${item.article}) - ${item.calculatedPrice.toLocaleString('ru-RU')} ‚ÇΩ`;",
      "    doc.text(line, 10, yPosition);",
      "    yPosition += 10;",
      "",
      "    if (yPosition > 270) {",
      "      doc.addPage();",
      "      yPosition = 20;",
      "    }",
      "  });",
      "",
      "  doc.save('${2:wasser-price-list}.pdf');",
      "}, []);"
    ],
    "description": "–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä PDF –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–æ–≤ —Å —Ç–∏–ø–∏–∑–∞—Ü–∏–µ–π"
  },

  "Material Cost Calculator": {
    "prefix": "matcost",
    "body": [
      "const calculateMaterialCost = useMemo(() => {",
      "  return (materials: Material[], quantities: Record<string, number>) => {",
      "    return materials.reduce((total, material) => {",
      "      const quantity = quantities[material.id] || 0;",
      "      const consumptionCoeff = material.consumptionCoeff || 1;",
      "      return total + (material.price * quantity * consumptionCoeff);",
      "    }, 0);",
      "  };",
      "}, []);",
      "",
      "const totalCost = useMemo(() => {",
      "  return calculateMaterialCost(${1:materials}, ${2:quantities});",
      "}, [calculateMaterialCost, ${1:materials}, ${2:quantities}]);"
    ],
    "description": "–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤"
  },

  "Supabase Hook": {
    "prefix": "usesupabase",
    "body": [
      "const [${1:data}, set${1/(.*)/${1:/capitalize}/}] = useState<${2:DataType}[]>([]);",
      "const [loading, setLoading] = useState(true);",
      "const [error, setError] = useState<string | null>(null);",
      "",
      "const fetch${1/(.*)/${1:/capitalize}/} = useCallback(async () => {",
      "  try {",
      "    setLoading(true);",
      "    setError(null);",
      "",
      "    const { data, error } = await supabase",
      "      .from('${3:table_name}')",
      "      .select('${4:*}');",
      "",
      "    if (error) throw error;",
      "    set${1/(.*)/${1:/capitalize}/}(data || []);",
      "  } catch (err) {",
      "    const message = err instanceof Error ? err.message : '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏';",
      "    setError(message);",
      "  } finally {",
      "    setLoading(false);",
      "  }",
      "}, []);",
      "",
      "useEffect(() => {",
      "  fetch${1/(.*)/${1:/capitalize}/}();",
      "}, [fetch${1/(.*)/${1:/capitalize}/}]);",
      "",
      "return { ${1:data}, loading, error, refetch: fetch${1/(.*)/${1:/capitalize}/} };"
    ],
    "description": "–¢–∏–ø–æ–±–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ö—É–∫ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Supabase"
  }
}
'@

Set-Content ".vscode\snippets\furniture.code-snippets" $furnitureSnippets -Encoding UTF8
Write-Host "‚úÖ –°–æ–∑–¥–∞–Ω furniture.code-snippets —Å–æ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —Å–Ω–∏–ø–ø–µ—Ç–∞–º–∏" -ForegroundColor Green

# –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
Write-Host "`nüéâ VS Code –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è WASSER —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!" -ForegroundColor Green
Write-Host "üìÅ –°–æ–∑–¥–∞–Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞:" -ForegroundColor Cyan
Write-Host "   ‚îî‚îÄ‚îÄ .vscode/" -ForegroundColor White
Write-Host "       ‚îú‚îÄ‚îÄ extensions.json     (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è)" -ForegroundColor White  
Write-Host "       ‚îú‚îÄ‚îÄ settings.json      (–Ω–∞—Å—Ç—Ä–æ–π–∫–∏ workspace)" -ForegroundColor White
Write-Host "       ‚îú‚îÄ‚îÄ tasks.json         (–∑–∞–¥–∞—á–∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏)" -ForegroundColor White
Write-Host "       ‚îú‚îÄ‚îÄ launch.json        (–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ—Ç–ª–∞–¥–∫–∏)" -ForegroundColor White
Write-Host "       ‚îî‚îÄ‚îÄ snippets/" -ForegroundColor White
Write-Host "           ‚îî‚îÄ‚îÄ furniture.code-snippets (—Å–Ω–∏–ø–ø–µ—Ç—ã –¥–ª—è –º–µ–±–µ–ª–∏)" -ForegroundColor White

Write-Host "`nüöÄ –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:" -ForegroundColor Yellow
Write-Host "   1. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ VS Code: code ." -ForegroundColor White
Write-Host "   2. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è (VS Code –ø–æ–∫–∞–∂–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ)" -ForegroundColor White  
Write-Host "   3. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ —Å–Ω–∏–ø–ø–µ—Ç—ã: fcomp, pricegen, matcost, usesupabase" -ForegroundColor White
Write-Host "   4. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∑–∞–¥–∞—á–∏: Ctrl+Shift+P ‚Üí Tasks: Run Task" -ForegroundColor White

Write-Host "`n‚ú® –ì–æ—Ç–æ–≤–æ –¥–ª—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –º–µ–±–µ–ª—å–Ω–æ–π —Ñ–∞–±—Ä–∏–∫–∏!" -ForegroundColor Magenta