# PowerShell —Å–∫—Ä–∏–ø—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–∏–ø–æ–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –º–µ–±–µ–ª—å–Ω–æ–π —Ñ–∞–±—Ä–∏–∫–∏ WASSER
# –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –∫ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã TypeScript

Write-Host "üèóÔ∏è –ó–∞–ø—É—Å–∫ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–∏–ø–æ–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ WASSER..." -ForegroundColor Cyan

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
if (-not (Test-Path "package.json")) {
    Write-Host "‚ùå –û—à–∏–±–∫–∞: –≤—ã–ø–æ–ª–Ω–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞ PRISE_WAS_PRO3" -ForegroundColor Red
    exit 1
}

Write-Host "üìç –¢–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: $(Get-Location)" -ForegroundColor Green

# –≠—Ç–∞–ø 1: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
Write-Host "`nüì¶ –≠—Ç–∞–ø 1: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫..." -ForegroundColor Yellow

$coreLibs = @(
    "sonner",
    "react-dropzone", 
    "xlsx",
    "jspdf",
    "jspdf-autotable"
)

foreach ($lib in $coreLibs) {
    Write-Host "   –£—Å—Ç–∞–Ω–æ–≤–∫–∞ $lib..." -ForegroundColor Gray
    npm install $lib
    if ($LASTEXITCODE -ne 0) {
        Write-Host "   ‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞ —Å —É—Å—Ç–∞–Ω–æ–≤–∫–æ–π $lib, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º..." -ForegroundColor Yellow
    }
}

# –≠—Ç–∞–ø 2: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Radix UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
Write-Host "`nüé® –≠—Ç–∞–ø 2: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Radix UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤..." -ForegroundColor Yellow

$radixComponents = @(
    "@radix-ui/react-accordion",
    "@radix-ui/react-alert-dialog",
    "@radix-ui/react-aspect-ratio", 
    "@radix-ui/react-avatar",
    "@radix-ui/react-checkbox",
    "@radix-ui/react-collapsible",
    "@radix-ui/react-context-menu",
    "@radix-ui/react-dialog",
    "@radix-ui/react-dropdown-menu",
    "@radix-ui/react-hover-card",
    "@radix-ui/react-label",
    "@radix-ui/react-menubar",
    "@radix-ui/react-navigation-menu",
    "@radix-ui/react-popover",
    "@radix-ui/react-progress",
    "@radix-ui/react-radio-group",
    "@radix-ui/react-scroll-area",
    "@radix-ui/react-select",
    "@radix-ui/react-separator",
    "@radix-ui/react-slider",
    "@radix-ui/react-switch",
    "@radix-ui/react-tabs",
    "@radix-ui/react-toast",
    "@radix-ui/react-toggle",
    "@radix-ui/react-toggle-group",
    "@radix-ui/react-tooltip",
    "@radix-ui/react-slot"
)

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Radix –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –±–∞—Ç—á–∞–º–∏ –ø–æ 5
$batchSize = 5
for ($i = 0; $i -lt $radixComponents.Count; $i += $batchSize) {
    $batch = $radixComponents[$i..($i + $batchSize - 1)]
    $batchStr = $batch -join " "
    Write-Host "   –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–∞—Ç—á–∞: $($batch -join ', ')" -ForegroundColor Gray
    npm install $batchStr
}

# –≠—Ç–∞–ø 3: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ UI –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
Write-Host "`nüéØ –≠—Ç–∞–ø 3: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ UI –±–∏–±–ª–∏–æ—Ç–µ–∫–∏..." -ForegroundColor Yellow

$additionalUILibs = @(
    "class-variance-authority",
    "cmdk",
    "vaul", 
    "input-otp",
    "react-day-picker",
    "embla-carousel-react",
    "recharts",
    "react-resizable-panels",
    "react-hook-form",
    "next-themes"
)

npm install ($additionalUILibs -join " ")

# –≠—Ç–∞–ø 4: –°–µ—Ä–≤–µ—Ä–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
Write-Host "`nüñ•Ô∏è –≠—Ç–∞–ø 4: –°–µ—Ä–≤–µ—Ä–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏..." -ForegroundColor Yellow

npm install express cors puppeteer
npm install -D "@types/express" "@types/cors"

# –≠—Ç–∞–ø 5: –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ ESLint
Write-Host "`nüîß –≠—Ç–∞–ø 5: –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ ESLint..." -ForegroundColor Yellow

$eslintConfig = @'
{
  "root": true,
  "env": { 
    "browser": true, 
    "es2020": true,
    "node": true
  },
  "extends": [
    "eslint:recommended",
    "@typescript-eslint/recommended",
    "plugin:react-hooks/recommended"
  ],
  "ignorePatterns": [
    "dist", 
    ".eslintrc.cjs", 
    "node_modules/",
    "*.d.ts"
  ],
  "parser": "@typescript-eslint/parser",
  "plugins": ["react-refresh"],
  "rules": {
    "react-refresh/only-export-components": [
      "warn",
      { "allowConstantExport": true }
    ],
    "@typescript-eslint/no-unused-vars": [
      "error", 
      { "argsIgnorePattern": "^_" }
    ],
    "@typescript-eslint/explicit-function-return-type": "off",
    "@typescript-eslint/no-explicit-any": "warn",
    "@typescript-eslint/no-non-null-assertion": "warn",
    "@typescript-eslint/ban-ts-comment": "warn"
  },
  "settings": {
    "react": {
      "version": "detect"
    }
  }
}
'@

Set-Content -Path ".eslintrc.json" -Value $eslintConfig -Encoding UTF8
Write-Host "   ‚úÖ .eslintrc.json —Å–æ–∑–¥–∞–Ω" -ForegroundColor Green

# –≠—Ç–∞–ø 6: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–æ–≤ utils –≤ UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö
Write-Host "`nüõ†Ô∏è –≠—Ç–∞–ø 6: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–æ–≤ utils –≤ UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö..." -ForegroundColor Yellow

$uiComponents = Get-ChildItem -Path "src/components/ui" -Filter "*.tsx" -Recurse

foreach ($file in $uiComponents) {
    $content = Get-Content $file.FullName -Raw
    if ($content -match '@/lib/utils') {
        $newContent = $content -replace '@/lib/utils', '../../lib/utils'
        Set-Content -Path $file.FullName -Value $newContent -Encoding UTF8
        Write-Host "   üìù –ò—Å–ø—Ä–∞–≤–ª–µ–Ω –∏–º–ø–æ—Ä—Ç –≤ $($file.Name)" -ForegroundColor Gray
    }
}

# –≠—Ç–∞–ø 7: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ MaterialImport —ç–∫—Å–ø–æ—Ä—Ç–∞
Write-Host "`nüìÑ –≠—Ç–∞–ø 7: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ MaterialImport —ç–∫—Å–ø–æ—Ä—Ç–∞..." -ForegroundColor Yellow

$xlsxParserPath = "src/lib/xlsx-parser.ts"
if (Test-Path $xlsxParserPath) {
    $xlsxContent = Get-Content $xlsxParserPath -Raw
    
    if (-not ($xlsxContent -match "export interface MaterialImport")) {
        $materialImportInterface = @"

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –∏–∑ Excel
export interface MaterialImport {
  name: string;
  article: string;
  type: string;
  unit: string;
  price: number;
}
"@
        Add-Content -Path $xlsxParserPath -Value $materialImportInterface
        Write-Host "   ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å MaterialImport" -ForegroundColor Green
    }
}

# –≠—Ç–∞–ø 8: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Button –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
Write-Host "`nüîò –≠—Ç–∞–ø 8: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Button –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞..." -ForegroundColor Yellow

$buttonComponentPath = "src/components/ui/button.tsx"
if (Test-Path $buttonComponentPath) {
    $fixedButtonContent = @'
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "../../lib/utils"

const buttonVariants = cva(
  "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
  {
    variants: {
      variant: {
        default:
          "bg-primary text-primary-foreground shadow hover:bg-primary/90",
        destructive:
          "bg-destructive text-destructive-foreground shadow-sm hover:bg-destructive/90",
        outline:
          "border border-input bg-background shadow-sm hover:bg-accent hover:text-accent-foreground",
        secondary:
          "bg-secondary text-secondary-foreground shadow-sm hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-9 px-4 py-2",
        sm: "h-8 rounded-md px-3 text-xs",
        lg: "h-10 rounded-md px-8",
        icon: "h-9 w-9",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : "button"
    return (
      <Comp
        className={cn(buttonVariants({ variant, size, className }))}
        ref={ref}
        {...props}
      />
    )
  }
)
Button.displayName = "Button"

export { Button, buttonVariants }
'@
    
    Set-Content -Path $buttonComponentPath -Value $fixedButtonContent -Encoding UTF8
    Write-Host "   ‚úÖ Button –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω" -ForegroundColor Green
}

# –≠—Ç–∞–ø 9: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Badge –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
Write-Host "`nüè∑Ô∏è –≠—Ç–∞–ø 9: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Badge –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞..." -ForegroundColor Yellow

$badgeComponentPath = "src/components/ui/badge.tsx"
if (Test-Path $badgeComponentPath) {
    $fixedBadgeContent = @'
import * as React from "react"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "../../lib/utils"

const badgeVariants = cva(
  "inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2",
  {
    variants: {
      variant: {
        default:
          "border-transparent bg-primary text-primary-foreground shadow hover:bg-primary/80",
        secondary:
          "border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80",
        destructive:
          "border-transparent bg-destructive text-destructive-foreground shadow hover:bg-destructive/80",
        outline: "text-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

export interface BadgeProps
  extends React.HTMLAttributes<HTMLDivElement>,
    VariantProps<typeof badgeVariants> {}

function Badge({ className, variant, ...props }: BadgeProps) {
  return (
    <div className={cn(badgeVariants({ variant }), className)} {...props} />
  )
}

export { Badge, badgeVariants }
'@
    
    Set-Content -Path $badgeComponentPath -Value $fixedBadgeContent -Encoding UTF8
    Write-Host "   ‚úÖ Badge –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω" -ForegroundColor Green
}

# –≠—Ç–∞–ø 10: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ HTML –∞—Ç—Ä–∏–±—É—Ç–æ–≤ width –≤ —Ç–∞–±–ª–∏—Ü–∞—Ö
Write-Host "`nüìä –≠—Ç–∞–ø 10: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ HTML –∞—Ç—Ä–∏–±—É—Ç–æ–≤ width..." -ForegroundColor Yellow

$tsxFiles = Get-ChildItem -Path "src" -Filter "*.tsx" -Recurse

foreach ($file in $tsxFiles) {
    $content = Get-Content $file.FullName -Raw
    $originalContent = $content
    
    # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ width='XX%' –Ω–∞ style={{width: 'XX%'}}
    $content = $content -replace "width='([^']+)'", "style={{width: '`$1'}}"
    $content = $content -replace 'width="([^"]+)"', 'style={{width: "$1"}}'
    
    if ($content -ne $originalContent) {
        Set-Content -Path $file.FullName -Value $content -Encoding UTF8
        Write-Host "   üìù –ò—Å–ø—Ä–∞–≤–ª–µ–Ω—ã width –∞—Ç—Ä–∏–±—É—Ç—ã –≤ $($file.Name)" -ForegroundColor Gray
    }
}

# –≠—Ç–∞–ø 11: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ TypeScript
Write-Host "`nüìù –≠—Ç–∞–ø 11: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ tsconfig.json..." -ForegroundColor Yellow

$tsConfig = @'
{
  "compilerOptions": {
    "target": "ES2020",
    "useDefineForClassFields": true,
    "lib": ["ES2020", "DOM", "DOM.Iterable"],
    "module": "ESNext",
    "skipLibCheck": true,
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "resolveJsonModule": true,
    "isolatedModules": true,
    "noEmit": true,
    "jsx": "react-jsx",
    "strict": true,
    "noUnusedLocals": false,
    "noUnusedParameters": false,
    "noFallthroughCasesInSwitch": true,
    "baseUrl": ".",
    "paths": {
      "@/*": ["./src/*"]
    },
    "allowSyntheticDefaultImports": true,
    "esModuleInterop": true
  },
  "include": ["src", "*.d.ts"],
  "references": [{ "path": "./tsconfig.node.json" }]
}
'@

Set-Content -Path "tsconfig.json" -Value $tsConfig -Encoding UTF8
Write-Host "   ‚úÖ tsconfig.json –æ–±–Ω–æ–≤–ª–µ–Ω" -ForegroundColor Green

# –≠—Ç–∞–ø 12: –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ —Ç–∏–ø–æ–≤ –¥–ª—è –±–∏–±–ª–∏–æ—Ç–µ–∫ –±–µ–∑ —Ç–∏–ø–∏–∑–∞—Ü–∏–∏
Write-Host "`nüèóÔ∏è –≠—Ç–∞–ø 12: –°–æ–∑–¥–∞–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö —Ç–∏–ø–æ–≤..." -ForegroundColor Yellow

$globalTypes = @'
// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ç–∏–ø—ã –¥–ª—è –º–µ–±–µ–ª—å–Ω–æ–π —Ñ–∞–±—Ä–∏–∫–∏ WASSER
declare module 'jspdf-autotable' {
  const autoTable: any;
  export default autoTable;
}

declare module 'sonner' {
  export const Toaster: React.ComponentType<any>;
  export const toast: any;
}

// –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ window –¥–ª—è File System API
interface Window {
  fs?: {
    readFile: (path: string, options?: any) => Promise<any>;
  };
}
'@

Set-Content -Path "src/types/global.d.ts" -Value $globalTypes -Encoding UTF8
if (-not (Test-Path "src/types")) {
    New-Item -Path "src/types" -ItemType Directory -Force | Out-Null
    Set-Content -Path "src/types/global.d.ts" -Value $globalTypes -Encoding UTF8
    Write-Host "   ‚úÖ –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ç–∏–ø—ã —Å–æ–∑–¥–∞–Ω—ã" -ForegroundColor Green
}

# –≠—Ç–∞–ø 13: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
Write-Host "`n‚úÖ –≠—Ç–∞–ø 13: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π..." -ForegroundColor Yellow

Write-Host "   üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è..." -ForegroundColor Gray
npm run format:check
$formatResult = $LASTEXITCODE

Write-Host "   üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ TypeScript —Ç–∏–ø–∏–∑–∞—Ü–∏–∏..." -ForegroundColor Gray
npm run type-check 2>&1 | Select-Object -First 20
$typeCheckResult = $LASTEXITCODE

Write-Host "   üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ ESLint..." -ForegroundColor Gray
npm run lint 2>&1 | Select-Object -First 10
$lintResult = $LASTEXITCODE

# –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
Write-Host "`nüéâ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–∏–ø–æ–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ WASSER –∑–∞–≤–µ—Ä—à–µ–Ω–æ!" -ForegroundColor Cyan

Write-Host "`nüìã –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π:" -ForegroundColor Yellow
Write-Host "   üì¶ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã" -ForegroundColor Green
Write-Host "   üîß ESLint –∫–æ–Ω—Ñ–∏–≥: –°–æ–∑–¥–∞–Ω" -ForegroundColor Green
Write-Host "   üé® UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω—ã" -ForegroundColor Green
Write-Host "   üìÑ –¢–∏–ø—ã: –î–æ–±–∞–≤–ª–µ–Ω—ã" -ForegroundColor Green
Write-Host "   üõ†Ô∏è HTML –∞—Ç—Ä–∏–±—É—Ç—ã: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω—ã" -ForegroundColor Green

if ($formatResult -eq 0) {
    Write-Host "   ‚úÖ –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: –ü—Ä–æ–π–¥–µ–Ω–æ" -ForegroundColor Green
} else {
    Write-Host "   ‚ö†Ô∏è –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: –¢—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è" -ForegroundColor Yellow
}

Write-Host "`nüìö –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è:" -ForegroundColor Cyan
Write-Host "   1. npm run type-check  # –ü–æ–ª–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–æ–≤" -ForegroundColor Gray
Write-Host "   2. npm run lint:fix    # –ê–≤—Ç–æ–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–∏–Ω—Ç–∏–Ω–≥–∞" -ForegroundColor Gray
Write-Host "   3. npm run build       # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–±–æ—Ä–∫–∏" -ForegroundColor Gray
Write-Host "   4. git add . && git commit -m 'fix: —Ç–∏–ø–æ–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å WASSER'" -ForegroundColor Gray

Write-Host "`nüèóÔ∏è –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –º–µ–±–µ–ª—å–Ω–æ–π —Ñ–∞–±—Ä–∏–∫–∏ WASSER –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!" -ForegroundColor Green