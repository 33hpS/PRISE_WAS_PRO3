-- üö® –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ê–£–¢–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–ò
-- –£—Å—Ç—Ä–∞–Ω—è–µ–º –ø—Ä–æ–±–ª–µ–º—ã —Å RLS –∏ –¥–æ–±–∞–≤–ª—è–µ–º —Ä–æ–ª–∏ –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

-- 1. –°–Ω–∞—á–∞–ª–∞ –æ—Ç–∫–ª—é—á–∞–µ–º RLS –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
ALTER TABLE IF EXISTS public.user_roles DISABLE ROW LEVEL SECURITY;

-- 2. –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Ä–æ–ª–µ–π –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
CREATE TABLE IF NOT EXISTS public.user_roles (
    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
    user_id UUID REFERENCES auth.users(id) ON DELETE CASCADE,
    role TEXT NOT NULL CHECK (role IN ('admin', 'manager')),
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    UNIQUE(user_id)
);

-- 3. –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ä–æ–ª–∏ —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
DELETE FROM public.user_roles;

-- 4. –î–æ–±–∞–≤–ª—è–µ–º —Ä–æ–ª–∏ –¥–ª—è –í–°–ï–• —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
INSERT INTO public.user_roles (user_id, role) 
SELECT 
    id as user_id,
    CASE 
        WHEN email = 'admin@wasser.com' THEN 'admin'
        WHEN email LIKE '%admin%' THEN 'admin'
        ELSE 'manager'
    END as role
FROM auth.users
ON CONFLICT (user_id) DO UPDATE SET 
    role = EXCLUDED.role,
    updated_at = NOW();

-- 5. –°–æ–∑–¥–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–µ–∑ —Ä–µ–∫—É—Ä—Å–∏–∏
CREATE OR REPLACE FUNCTION public.get_user_role(check_user_id UUID DEFAULT NULL)
RETURNS TEXT
LANGUAGE plpgsql
SECURITY DEFINER
SET search_path = public
AS $$
DECLARE
    user_role TEXT;
    target_user_id UUID;
BEGIN
    -- –ï—Å–ª–∏ ID –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    target_user_id := COALESCE(check_user_id, auth.uid());
    
    -- –ï—Å–ª–∏ –Ω–µ—Ç ID, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º manager
    IF target_user_id IS NULL THEN
        RETURN 'manager';
    END IF;
    
    -- –ü–æ–ª—É—á–∞–µ–º —Ä–æ–ª—å –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
    SELECT role INTO user_role 
    FROM public.user_roles 
    WHERE user_id = target_user_id;
    
    -- –ï—Å–ª–∏ —Ä–æ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø—Ä–æ–≤–µ—Ä—è–µ–º email –∏ —Å–æ–∑–¥–∞–µ–º —Ä–æ–ª—å
    IF user_role IS NULL THEN
        SELECT 
            CASE 
                WHEN email = 'admin@wasser.com' THEN 'admin'
                WHEN email LIKE '%admin%' THEN 'admin'
                ELSE 'manager'
            END INTO user_role
        FROM auth.users 
        WHERE id = target_user_id;
        
        -- –°–æ–∑–¥–∞–µ–º —Ä–æ–ª—å
        IF user_role IS NOT NULL THEN
            INSERT INTO public.user_roles (user_id, role) 
            VALUES (target_user_id, user_role)
            ON CONFLICT (user_id) DO UPDATE SET role = EXCLUDED.role;
        ELSE
            user_role := 'manager';
        END IF;
    END IF;
    
    RETURN COALESCE(user_role, 'manager');
END;
$$;

-- 6. –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω–∞
CREATE OR REPLACE FUNCTION public.is_admin(check_user_id UUID DEFAULT NULL)
RETURNS BOOLEAN
LANGUAGE plpgsql
SECURITY DEFINER
SET search_path = public
AS $$
BEGIN
    RETURN public.get_user_role(check_user_id) = 'admin';
END;
$$;

-- 7. –ü—Ä–æ—Å—Ç—ã–µ –ø–æ–ª–∏—Ç–∏–∫–∏ RLS –±–µ–∑ —Ä–µ–∫—É—Ä—Å–∏–∏
DROP POLICY IF EXISTS "Users can view own role" ON public.user_roles;
DROP POLICY IF EXISTS "Admins can manage all roles" ON public.user_roles;

-- –ü–æ–ª–∏—Ç–∏–∫–∞ –¥–ª—è —á—Ç–µ–Ω–∏—è —Å–≤–æ–µ–π —Ä–æ–ª–∏
CREATE POLICY "Users can view own role" ON public.user_roles
    FOR SELECT
    USING (user_id = auth.uid());

-- –ü–æ–ª–∏—Ç–∏–∫–∞ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤ (—á–µ—Ä–µ–∑ service role)
CREATE POLICY "Service role full access" ON public.user_roles
    FOR ALL
    USING (current_setting('role') = 'service_role');

-- 8. –í–∫–ª—é—á–∞–µ–º RLS –æ–±—Ä–∞—Ç–Ω–æ
ALTER TABLE public.user_roles ENABLE ROW LEVEL SECURITY;

-- 9. –î–∞–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ —Ñ—É–Ω–∫—Ü–∏–∏
GRANT EXECUTE ON FUNCTION public.get_user_role(UUID) TO authenticated, anon;
GRANT EXECUTE ON FUNCTION public.is_admin(UUID) TO authenticated, anon;

-- 10. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
SELECT 
    u.email,
    ur.role,
    public.get_user_role(u.id) as function_role,
    public.is_admin(u.id) as is_admin_check
FROM auth.users u
LEFT JOIN public.user_roles ur ON u.id = ur.user_id
ORDER BY u.created_at;

-- ‚úÖ –ì–û–¢–û–í–û! –¢–µ–ø–µ—Ä—å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –¥–æ–ª–∂–Ω–∞ —Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
