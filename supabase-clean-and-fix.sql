-- üßπ –ü–û–õ–ù–ê–Ø –û–ß–ò–°–¢–ö–ê –ò –ü–ï–†–ï–°–û–ó–î–ê–ù–ò–ï –°–ò–°–¢–ï–ú–´ –†–û–õ–ï–ô
-- –í—ã–ø–æ–ª–Ω–∏—Ç–µ —ç—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –¶–ï–õ–ò–ö–û–ú –≤ Supabase SQL Editor

-- =====================================
-- üóëÔ∏è –®–ê–ì 1: –£–î–ê–õ–ï–ù–ò–ï –í–°–ï–ì–û –°–¢–ê–†–û–ì–û
-- =====================================

-- –£–¥–∞–ª—è–µ–º –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏
DROP FUNCTION IF EXISTS public.get_user_role(uuid);
DROP FUNCTION IF EXISTS public.get_user_role();
DROP FUNCTION IF EXISTS public.is_admin(uuid);
DROP FUNCTION IF EXISTS public.is_admin();

-- –£–¥–∞–ª—è–µ–º –≤—Å–µ –ø–æ–ª–∏—Ç–∏–∫–∏ RLS
DROP POLICY IF EXISTS "user_roles_policy" ON public.user_roles;
DROP POLICY IF EXISTS "user_roles_insert_policy" ON public.user_roles;
DROP POLICY IF EXISTS "user_roles_update_policy" ON public.user_roles;
DROP POLICY IF EXISTS "user_roles_delete_policy" ON public.user_roles;
DROP POLICY IF EXISTS "user_roles_select_policy" ON public.user_roles;

-- –û—Ç–∫–ª—é—á–∞–µ–º RLS –≤—Ä–µ–º–µ–Ω–Ω–æ
ALTER TABLE public.user_roles DISABLE ROW LEVEL SECURITY;

-- =====================================
-- üîß –®–ê–ì 2: –ü–ï–†–ï–°–û–ó–î–ê–ù–ò–ï –¢–ê–ë–õ–ò–¶–´
-- =====================================

-- –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Ä–æ–ª–µ–π (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
DROP TABLE IF EXISTS public.user_roles;
CREATE TABLE public.user_roles (
    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
    user_id UUID REFERENCES auth.users(id) ON DELETE CASCADE UNIQUE,
    role TEXT NOT NULL DEFAULT 'manager' CHECK (role IN ('admin', 'manager')),
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- =====================================
-- üîß –®–ê–ì 3: –ë–ï–ó–û–ü–ê–°–ù–´–ï –§–£–ù–ö–¶–ò–ò
-- =====================================

-- ‚úÖ –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–æ–ª–∏ (–ë–ï–ó RLS)
CREATE OR REPLACE FUNCTION public.get_user_role(check_user_id UUID DEFAULT auth.uid())
RETURNS TEXT
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
DECLARE
    user_role TEXT;
    user_email TEXT;
BEGIN
    -- –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω
    IF check_user_id IS NULL THEN
        RETURN 'manager';
    END IF;
    
    -- –ü–æ–ª—É—á–∞–µ–º —Ä–æ–ª—å –∏–∑ —Ç–∞–±–ª–∏—Ü—ã (SECURITY DEFINER –æ–±—Ö–æ–¥–∏—Ç RLS)
    SELECT role INTO user_role 
    FROM public.user_roles 
    WHERE user_id = check_user_id;
    
    -- –ï—Å–ª–∏ —Ä–æ–ª—å –Ω–∞–π–¥–µ–Ω–∞ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º
    IF user_role IS NOT NULL THEN
        RETURN user_role;
    END IF;
    
    -- –ï—Å–ª–∏ —Ä–æ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ - –ø—Ä–æ–≤–µ—Ä—è–µ–º email –¥–ª—è fallback
    SELECT email INTO user_email 
    FROM auth.users 
    WHERE id = check_user_id;
    
    -- Fallback –Ω–∞ –æ—Å–Ω–æ–≤–µ email
    IF user_email = 'admin@wasser.com' THEN
        -- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–µ–º —Ä–æ–ª—å –∞–¥–º–∏–Ω–∞
        INSERT INTO public.user_roles (user_id, role) 
        VALUES (check_user_id, 'admin')
        ON CONFLICT (user_id) DO UPDATE SET role = 'admin';
        RETURN 'admin';
    ELSE
        -- –°–æ–∑–¥–∞–µ–º —Ä–æ–ª—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –¥–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö
        INSERT INTO public.user_roles (user_id, role) 
        VALUES (check_user_id, 'manager')
        ON CONFLICT (user_id) DO NOTHING;
        RETURN 'manager';
    END IF;
END;
$$;

-- ‚úÖ –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω–∞
CREATE OR REPLACE FUNCTION public.is_admin(check_user_id UUID DEFAULT auth.uid())
RETURNS BOOLEAN
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
BEGIN
    RETURN public.get_user_role(check_user_id) = 'admin';
END;
$$;

-- =====================================
-- üõ°Ô∏è –®–ê–ì 4: –ü–†–û–°–¢–´–ï RLS –ü–û–õ–ò–¢–ò–ö–ò
-- =====================================

-- –í–∫–ª—é—á–∞–µ–º RLS
ALTER TABLE public.user_roles ENABLE ROW LEVEL SECURITY;

-- –ü—Ä–æ—Å—Ç–∞—è –ø–æ–ª–∏—Ç–∏–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤–∏–¥—è—Ç —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ —Ä–æ–ª–∏
CREATE POLICY "user_roles_own_data" ON public.user_roles
    FOR ALL
    USING (user_id = auth.uid());

-- –ê–¥–º–∏–Ω—ã –≤–∏–¥—è—Ç –≤—Å–µ —Ä–æ–ª–∏ (–∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—à—É –±–µ–∑–æ–ø–∞—Å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é)
CREATE POLICY "user_roles_admin_access" ON public.user_roles
    FOR ALL
    USING (public.is_admin());

-- =====================================
-- üöÄ –®–ê–ì 5: –°–û–ó–î–ê–ù–ò–ï –†–û–õ–ï–ô –î–õ–Ø –í–°–ï–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô
-- =====================================

-- –°–æ–∑–¥–∞–µ–º —Ä–æ–ª–∏ –¥–ª—è –≤—Å–µ—Ö —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
INSERT INTO public.user_roles (user_id, role)
SELECT 
    id,
    CASE 
        WHEN email = 'admin@wasser.com' THEN 'admin'
        ELSE 'manager'
    END as role
FROM auth.users
ON CONFLICT (user_id) DO UPDATE SET 
    role = EXCLUDED.role,
    updated_at = NOW();

-- =====================================
-- ‚úÖ –®–ê–ì 6: –ü–†–û–í–ï–†–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–ê
-- =====================================

-- –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å—ë —Ä–∞–±–æ—Ç–∞–µ—Ç
SELECT 'SUCCESS: Functions created' as status;

-- –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ä–æ–ª—è–º–∏
SELECT 
    u.email,
    COALESCE(ur.role, 'No role') as role,
    ur.created_at
FROM auth.users u 
LEFT JOIN public.user_roles ur ON u.id = ur.user_id
ORDER BY u.email;

-- –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏
SELECT 
    'Function test:' as test,
    public.get_user_role() as current_user_role,
    public.is_admin() as is_current_user_admin;
