# PowerShell —Å–∫—Ä–∏–ø—Ç –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ VS Code –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ WASSER
# –ó–∞–ø—É—Å—Ç–∏—Ç–µ –æ—Ç –∏–º–µ–Ω–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞

Write-Host "üöÄ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ VS Code –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ WASSER" -ForegroundColor Cyan
Write-Host "========================================" -ForegroundColor Cyan

# –ü–µ—Ä–µ—Ö–æ–¥ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞
$projectPath = "D:\PRISE_WAS_PRO3"
Set-Location $projectPath
Write-Host "üìÅ –†–∞–±–æ—Ç–∞–µ–º –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: $projectPath" -ForegroundColor Green

# 1. –£–°–¢–ê–ù–û–í–ö–ê –†–ê–°–®–ò–†–ï–ù–ò–ô VS CODE
Write-Host "`nüì¶ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è VS Code..." -ForegroundColor Yellow

$extensions = @(
    "dbaeumer.vscode-eslint",              # ESLint
    "esbenp.prettier-vscode",               # Prettier
    "formulahendry.auto-rename-tag",        # Auto Rename Tag
    "formulahendry.auto-close-tag",         # Auto Close Tag
    "bradlc.vscode-tailwindcss",           # Tailwind CSS IntelliSense
    "dsznajder.es7-react-js-snippets",     # React snippets
    "pmneo.tsimporter",                     # TypeScript Auto Import
    "yoavbls.pretty-ts-errors",            # Pretty TypeScript Errors
    "usernamehw.errorlens",                # Error Lens
    "eamodio.gitlens",                     # GitLens
    "mhutchie.git-graph",                   # Git Graph
    "donjayamanne.githistory",              # Git History
    "github.copilot",                       # GitHub Copilot
    "wayou.vscode-todo-highlight",          # TODO Highlight
    "gruntfuggly.todo-tree",                # Todo Tree
    "christian-kohler.path-intellisense",   # Path Intellisense
    "mikestead.dotenv",                     # DotENV
    "ms-vscode.vscode-typescript-next",     # TypeScript Nightly
    "styled-components.vscode-styled-components", # Styled Components
    "prisma.prisma",                        # Prisma –¥–ª—è Supabase
    "streetsidesoftware.code-spell-checker", # Spell Checker
    "streetsidesoftware.code-spell-checker-russian" # Russian Spell Checker
)

foreach ($ext in $extensions) {
    Write-Host "  ‚ûú –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º $ext" -ForegroundColor Gray
    code --install-extension $ext --force 2>$null
}

# 2. –°–û–ó–î–ê–ù–ò–ï –ù–ê–°–¢–†–û–ï–ö VS CODE
Write-Host "`n‚öôÔ∏è –°–æ–∑–¥–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ VS Code..." -ForegroundColor Yellow

$vscodeDir = ".vscode"
if (!(Test-Path $vscodeDir)) {
    New-Item -ItemType Directory -Path $vscodeDir
}

# settings.json
$settingsJson = @'
{
  // –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞
  "editor.fontSize": 14,
  "editor.fontFamily": "'Cascadia Code', 'Fira Code', Consolas, monospace",
  "editor.fontLigatures": true,
  "editor.tabSize": 2,
  "editor.wordWrap": "on",
  "editor.minimap.enabled": true,
  "editor.formatOnSave": true,
  "editor.formatOnPaste": true,
  "editor.codeActionsOnSave": {
    "source.fixAll.eslint": "explicit",
    "source.organizeImports": "explicit"
  },
  "editor.defaultFormatter": "esbenp.prettier-vscode",
  "editor.bracketPairColorization.enabled": true,
  "editor.guides.bracketPairs": "active",
  "editor.suggestSelection": "first",
  "editor.snippetSuggestions": "top",
  "editor.inlineSuggest.enabled": true,
  
  // TypeScript –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
  "typescript.updateImportsOnFileMove.enabled": "always",
  "typescript.preferences.includePackageJsonAutoImports": "on",
  "typescript.suggest.autoImports": true,
  "typescript.preferences.importModuleSpecifier": "relative",
  
  // Prettier –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
  "prettier.semi": false,
  "prettier.singleQuote": true,
  "prettier.trailingComma": "all",
  "prettier.printWidth": 100,
  
  // ESLint
  "eslint.validate": [
    "javascript",
    "javascriptreact",
    "typescript",
    "typescriptreact"
  ],
  
  // Tailwind CSS
  "tailwindCSS.experimental.classRegex": [
    ["cn\\(([^)]*)\\)", "[\"'`]([^\"'`]*).*?[\"'`]"],
    ["cva\\(([^)]*)\\)", "[\"'`]([^\"'`]*).*?[\"'`]"]
  ],
  "tailwindCSS.includeLanguages": {
    "typescript": "javascript",
    "typescriptreact": "javascript"
  },
  
  // Git –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
  "git.enableSmartCommit": true,
  "git.autofetch": true,
  "git.confirmSync": false,
  "git.postCommitCommand": "push",
  "git.defaultCloneDirectory": "D:\\",
  "gitlens.hovers.currentLine.over": "line",
  "gitlens.codeLens.enabled": true,
  
  // –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
  "files.autoSave": "afterDelay",
  "files.autoSaveDelay": 1000,
  
  // –ò—Å–∫–ª—é—á–µ–Ω–∏—è –∏–∑ –ø–æ–∏—Å–∫–∞
  "search.exclude": {
    "**/node_modules": true,
    "**/dist": true,
    "**/build": true,
    "**/.git": true,
    "**/coverage": true
  },
  
  // –§–∞–π–ª–æ–≤—ã–µ –∞—Å—Å–æ—Ü–∏–∞—Ü–∏–∏
  "files.associations": {
    "*.css": "tailwindcss",
    ".env*": "dotenv"
  },
  
  // Terminal
  "terminal.integrated.defaultProfile.windows": "PowerShell",
  "terminal.integrated.fontSize": 13,
  
  // TODO –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
  "todo-tree.general.tags": [
    "TODO",
    "FIXME",
    "BUG",
    "HACK",
    "NOTE",
    "TODO:",
    "–í–ê–ñ–ù–û:",
    "–ò–°–ü–†–ê–í–ò–¢–¨:"
  ],
  "todo-tree.regex.regex": "(//|#|<!--|;|/\\*|^|^\\s*(-|\\d+.))\\s*($TAGS)",
  
  // Spell checker –¥–ª—è —Ä—É—Å—Å–∫–æ–≥–æ
  "cSpell.language": "en,ru",
  "cSpell.enableFiletypes": [
    "typescript",
    "typescriptreact",
    "javascript",
    "javascriptreact"
  ],
  
  // Emmet
  "emmet.includeLanguages": {
    "javascript": "javascriptreact",
    "typescript": "typescriptreact"
  },
  
  // Path Intellisense
  "path-intellisense.mappings": {
    "@": "${workspaceFolder}/src",
    "~": "${workspaceFolder}"
  }
}
'@

$settingsJson | Out-File -FilePath "$vscodeDir\settings.json" -Encoding UTF8

# 3. –°–û–ó–î–ê–ù–ò–ï TASKS.JSON –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
Write-Host "`nüìã –°–æ–∑–¥–∞–µ–º tasks.json..." -ForegroundColor Yellow

$tasksJson = @'
{
  "version": "2.0.0",
  "tasks": [
    {
      "label": "Dev Server",
      "type": "npm",
      "script": "dev",
      "problemMatcher": [],
      "group": {
        "kind": "build",
        "isDefault": true
      },
      "presentation": {
        "reveal": "always",
        "panel": "dedicated"
      }
    },
    {
      "label": "Build Production",
      "type": "npm",
      "script": "build",
      "problemMatcher": []
    },
    {
      "label": "Auto Commit & Push",
      "type": "shell",
      "command": "git add . && git commit -m 'Auto update: ${input:commitMessage}' && git push",
      "problemMatcher": []
    },
    {
      "label": "Generate PDF Test",
      "type": "npm",
      "script": "test:pdf",
      "problemMatcher": []
    },
    {
      "label": "Supabase Generate Types",
      "type": "shell",
      "command": "npx supabase gen types typescript --project-id ${input:supabaseProjectId} > src/types/supabase.ts",
      "problemMatcher": []
    }
  ],
  "inputs": [
    {
      "id": "commitMessage",
      "type": "promptString",
      "description": "Commit message",
      "default": "–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"
    },
    {
      "id": "supabaseProjectId",
      "type": "promptString",
      "description": "Supabase Project ID"
    }
  ]
}
'@

$tasksJson | Out-File -FilePath "$vscodeDir\tasks.json" -Encoding UTF8

# 4. –°–û–ó–î–ê–ù–ò–ï LAUNCH.JSON –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
Write-Host "`nüêõ –°–æ–∑–¥–∞–µ–º launch.json –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏..." -ForegroundColor Yellow

$launchJson = @'
{
  "version": "0.2.0",
  "configurations": [
    {
      "type": "chrome",
      "request": "launch",
      "name": "Launch Chrome against localhost",
      "url": "http://localhost:5173",
      "webRoot": "${workspaceFolder}",
      "sourceMaps": true,
      "sourceMapPathOverrides": {
        "webpack:///./src/*": "${webRoot}/src/*"
      }
    },
    {
      "type": "node",
      "request": "launch",
      "name": "Debug PDF Server",
      "program": "${workspaceFolder}/src/server/pdf-server.ts",
      "preLaunchTask": "npm: build",
      "outFiles": ["${workspaceFolder}/dist/**/*.js"]
    }
  ]
}
'@

$launchJson | Out-File -FilePath "$vscodeDir\launch.json" -Encoding UTF8

# 5. –°–û–ó–î–ê–ù–ò–ï EXTENSIONS.JSON
Write-Host "`nüìå –°–æ–∑–¥–∞–µ–º extensions.json..." -ForegroundColor Yellow

$extensionsJson = @'
{
  "recommendations": [
    "dbaeumer.vscode-eslint",
    "esbenp.prettier-vscode",
    "bradlc.vscode-tailwindcss",
    "dsznajder.es7-react-js-snippets",
    "eamodio.gitlens",
    "usernamehw.errorlens"
  ]
}
'@

$extensionsJson | Out-File -FilePath "$vscodeDir\extensions.json" -Encoding UTF8

# 6. –ù–ê–°–¢–†–û–ô–ö–ê GIT HOOKS –¥–ª—è –∞–≤—Ç–æ–∫–æ–º–º–∏—Ç–∞
Write-Host "`nüîß –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Git hooks..." -ForegroundColor Yellow

# –°–æ–∑–¥–∞–µ–º pre-commit hook
$preCommitHook = @'
#!/bin/sh
# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–µ—Ä–µ–¥ –∫–æ–º–º–∏—Ç–æ–º
git add .

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥ —á–µ—Ä–µ–∑ ESLint
npm run lint:fix 2>/dev/null || true

# –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫–æ–¥ —á–µ—Ä–µ–∑ Prettier
npm run format 2>/dev/null || true

exit 0
'@

$gitHooksDir = ".git\hooks"
if (Test-Path $gitHooksDir) {
    $preCommitHook | Out-File -FilePath "$gitHooksDir\pre-commit" -Encoding UTF8 -NoNewline
}

# 7. –°–û–ó–î–ê–ù–ò–ï –°–ö–†–ò–ü–¢–ê –ê–í–¢–û–ö–û–ú–ú–ò–¢–ê
Write-Host "`nü§ñ –°–æ–∑–¥–∞–µ–º PowerShell —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∞–≤—Ç–æ–∫–æ–º–º–∏—Ç–∞..." -ForegroundColor Yellow

$autoCommitScript = @'
# Auto Commit Script for WASSER Project
param(
    [string]$message = "Auto update: $(Get-Date -Format 'yyyy-MM-dd HH:mm')"
)

function Show-Menu {
    Clear-Host
    Write-Host "================== WASSER AUTO COMMIT ==================" -ForegroundColor Cyan
    Write-Host "1. Quick Commit (–∞–≤—Ç–æ-—Å–æ–æ–±—â–µ–Ω–∏–µ)" -ForegroundColor Green
    Write-Host "2. Commit —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º" -ForegroundColor Yellow
    Write-Host "3. Commit + Push" -ForegroundColor Magenta
    Write-Host "4. Pull –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π" -ForegroundColor Blue
    Write-Host "5. –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å" -ForegroundColor White
    Write-Host "6. –û—Ç–º–µ–Ω–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π –∫–æ–º–º–∏—Ç" -ForegroundColor Red
    Write-Host "Q. –í—ã—Ö–æ–¥" -ForegroundColor Gray
    Write-Host "=======================================================" -ForegroundColor Cyan
}

do {
    Show-Menu
    $choice = Read-Host "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ"
    
    switch ($choice) {
        '1' {
            git add .
            $files = git diff --cached --name-only
            if ($files) {
                $msg = "–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: $($files -join ', ')"
                git commit -m $msg
                Write-Host "‚úÖ –ö–æ–º–º–∏—Ç —Å–æ–∑–¥–∞–Ω: $msg" -ForegroundColor Green
            } else {
                Write-Host "‚ö†Ô∏è –ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è –∫–æ–º–º–∏—Ç–∞" -ForegroundColor Yellow
            }
            Read-Host "–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è"
        }
        '2' {
            $customMsg = Read-Host "–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–º–∏—Ç–∞"
            git add .
            git commit -m $customMsg
            Write-Host "‚úÖ –ö–æ–º–º–∏—Ç —Å–æ–∑–¥–∞–Ω: $customMsg" -ForegroundColor Green
            Read-Host "–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è"
        }
        '3' {
            $customMsg = Read-Host "–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–º–∏—Ç–∞"
            git add .
            git commit -m $customMsg
            git push
            Write-Host "‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä" -ForegroundColor Green
            Read-Host "–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è"
        }
        '4' {
            git pull
            Write-Host "‚úÖ –ü–æ–ª—É—á–µ–Ω—ã –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è" -ForegroundColor Green
            Read-Host "–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è"
        }
        '5' {
            git status
            Read-Host "`n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è"
        }
        '6' {
            git reset HEAD~1
            Write-Host "‚úÖ –ü–æ—Å–ª–µ–¥–Ω–∏–π –∫–æ–º–º–∏—Ç –æ—Ç–º–µ–Ω–µ–Ω" -ForegroundColor Yellow
            Read-Host "–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è"
        }
    }
} while ($choice -ne 'Q')
'@

$autoCommitScript | Out-File -FilePath "auto-commit.ps1" -Encoding UTF8

# 8. –°–û–ó–î–ê–ù–ò–ï PRETTIER CONFIG
Write-Host "`nüíÖ –°–æ–∑–¥–∞–µ–º Prettier –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é..." -ForegroundColor Yellow

$prettierConfig = @'
{
  "semi": false,
  "trailingComma": "all",
  "singleQuote": true,
  "printWidth": 100,
  "tabWidth": 2,
  "useTabs": false,
  "arrowParens": "always",
  "endOfLine": "lf"
}
'@

$prettierConfig | Out-File -FilePath ".prettierrc" -Encoding UTF8

# 9. –°–û–ó–î–ê–ù–ò–ï ESLINT CONFIG
Write-Host "`nüìè –°–æ–∑–¥–∞–µ–º ESLint –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é..." -ForegroundColor Yellow

$eslintConfig = @'
{
  "extends": [
    "eslint:recommended",
    "plugin:@typescript-eslint/recommended",
    "plugin:react/recommended",
    "plugin:react-hooks/recommended"
  ],
  "parser": "@typescript-eslint/parser",
  "plugins": ["@typescript-eslint", "react", "react-hooks"],
  "rules": {
    "react/react-in-jsx-scope": "off",
    "react/prop-types": "off",
    "@typescript-eslint/explicit-module-boundary-types": "off",
    "@typescript-eslint/no-unused-vars": ["warn", { "argsIgnorePattern": "^_" }],
    "no-console": ["warn", { "allow": ["warn", "error"] }]
  },
  "settings": {
    "react": {
      "version": "detect"
    }
  }
}
'@

$eslintConfig | Out-File -FilePath ".eslintrc.json" -Encoding UTF8

# 10. –ù–ê–°–¢–†–û–ô–ö–ê GIT –ê–õ–ò–ê–°–û–í
Write-Host "`nüéØ –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Git –∞–ª–∏–∞—Å—ã..." -ForegroundColor Yellow

git config --global alias.s "status -s"
git config --global alias.co "checkout"
git config --global alias.br "branch"
git config --global alias.cm "commit -m"
git config --global alias.ac "!git add . && git commit -m"
git config --global alias.acp "!git add . && git commit -m '$1' && git push"
git config --global alias.undo "reset HEAD~1"
git config --global alias.last "log -1 HEAD"
git config --global alias.visual "!gitk"

# 11. –£–°–¢–ê–ù–û–í–ö–ê NPM –°–ö–†–ò–ü–¢–û–í
Write-Host "`nüì¶ –û–±–Ω–æ–≤–ª—è–µ–º package.json —Å–∫—Ä–∏–ø—Ç—ã..." -ForegroundColor Yellow

$packageJsonPath = "package.json"
if (Test-Path $packageJsonPath) {
    $packageJson = Get-Content $packageJsonPath -Raw | ConvertFrom-Json
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ–∑–Ω—ã–µ —Å–∫—Ä–∏–ø—Ç—ã
    $packageJson.scripts | Add-Member -NotePropertyName "commit" -NotePropertyValue "git add . && git-cz" -Force
    $packageJson.scripts | Add-Member -NotePropertyName "push" -NotePropertyValue "git push" -Force
    $packageJson.scripts | Add-Member -NotePropertyName "pull" -NotePropertyValue "git pull" -Force
    $packageJson.scripts | Add-Memberetermine "lint:fix" -NotePropertyValue "eslint . --fix" -Force
    $packageJson.scripts | Add-Member -NotePropertyName "format" -NotePropertyValue "prettier --write ." -Force
    $packageJson.scripts | Add-Member -NotePropertyName "type-check" -NotePropertyValue "tsc --noEmit" -Force
    $packageJson.scripts | Add-Member -NotePropertyName "clean" -NotePropertyValue "rimraf dist node_modules" -Force
    
    $packageJson | ConvertTo-Json -Depth 10 | Out-File $packageJsonPath -Encoding UTF8
}

# 12. –°–û–ó–î–ê–ù–ò–ï –ì–õ–û–ë–ê–õ–¨–ù–û–ì–û GIT IGNORE
Write-Host "`nüö´ –û–±–Ω–æ–≤–ª—è–µ–º .gitignore..." -ForegroundColor Yellow

$gitignoreAdditions = @"

# IDE
.vscode/*
!.vscode/settings.json
!.vscode/tasks.json
!.vscode/launch.json
!.vscode/extensions.json
.idea/

# Logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# OS
.DS_Store
Thumbs.db

# Temp
*.tmp
*.temp
*.cache

# Build
dist/
build/
out/

# Environment
.env.local
.env.development
.env.production

# Database
*.db
*.sqlite
"@

if (Test-Path ".gitignore") {
    Add-Content -Path ".gitignore" -Value $gitignoreAdditions
} else {
    $gitignoreAdditions | Out-File -FilePath ".gitignore" -Encoding UTF8
}

# 13. –§–ò–ù–ê–õ–¨–ù–ê–Ø –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø
Write-Host "`nüîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–º..." -ForegroundColor Yellow

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
git fetch origin 2>$null
$status = git status --porcelain

if ($status) {
    Write-Host "üìù –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ª–æ–∫–∞–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è" -ForegroundColor Cyan
    $commitNow = Read-Host "–•–æ—Ç–∏—Ç–µ –∑–∞–∫–æ–º–º–∏—Ç–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–µ–π—á–∞—Å? (y/n)"
    
    if ($commitNow -eq 'y') {
        git add .
        git commit -m "feat: –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ VS Code –∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞"
        Write-Host "‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è –∑–∞–∫–æ–º–º–∏—á–µ–Ω—ã" -ForegroundColor Green
        
        $pushNow = Read-Host "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä? (y/n)"
        if ($pushNow -eq 'y') {
            git push
            Write-Host "‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã" -ForegroundColor Green
        }
    }
}

# 14. –°–û–ó–î–ê–ù–ò–ï –Ø–†–õ–´–ö–ê –î–õ–Ø –ë–´–°–¢–†–û–ì–û –ó–ê–ü–£–°–ö–ê
Write-Host "`nüöÄ –°–æ–∑–¥–∞–µ–º —è—Ä–ª—ã–∫ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∑–∞–ø—É—Å–∫–∞..." -ForegroundColor Yellow

$shortcutPath = "$env:USERPROFILE\Desktop\WASSER Project.lnk"
$shell = New-Object -ComObject WScript.Shell
$shortcut = $shell.CreateShortcut($shortcutPath)
$shortcut.TargetPath = "code"
$shortcut.Arguments = $projectPath
$shortcut.WorkingDirectory = $projectPath
$shortcut.IconLocation = "code.exe,0"
$shortcut.Description = "Open WASSER Project in VS Code"
$shortcut.Save()

Write-Host "`n‚úÖ –ù–ê–°–¢–†–û–ô–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê!" -ForegroundColor Green
Write-Host "================================" -ForegroundColor Green
Write-Host "üìå –ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:" -ForegroundColor Cyan
Write-Host "  ‚Ä¢ npm run dev - –∑–∞–ø—É—Å–∫ dev —Å–µ—Ä–≤–µ—Ä–∞" -ForegroundColor White
Write-Host "  ‚Ä¢ npm run build - —Å–±–æ—Ä–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞" -ForegroundColor White
Write-Host "  ‚Ä¢ ./auto-commit.ps1 - –º–µ–Ω—é –∞–≤—Ç–æ–∫–æ–º–º–∏—Ç–∞" -ForegroundColor White
Write-Host "  ‚Ä¢ git ac 'message' - –±—ã—Å—Ç—Ä—ã–π –∫–æ–º–º–∏—Ç" -ForegroundColor White
Write-Host "  ‚Ä¢ git acp 'message' - –∫–æ–º–º–∏—Ç + push" -ForegroundColor White
Write-Host "  ‚Ä¢ git undo - –æ—Ç–º–µ–Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∫–æ–º–º–∏—Ç–∞" -ForegroundColor White
Write-Host "  ‚Ä¢ Ctrl+Shift+P -> Run Task - –∑–∞–ø—É—Å–∫ –∑–∞–¥–∞—á VS Code" -ForegroundColor Yellow
Write-Host "`nüéØ –Ø—Ä–ª—ã–∫ —Å–æ–∑–¥–∞–Ω –Ω–∞ —Ä–∞–±–æ—á–µ–º —Å—Ç–æ–ª–µ!" -ForegroundColor Magenta
Write-Host "================================" -ForegroundColor Green

# –û—Ç–∫—Ä—ã–≤–∞–µ–º VS Code
$openVscode = Read-Host "`n–û—Ç–∫—Ä—ã—Ç—å –ø—Ä–æ–µ–∫—Ç –≤ VS Code? (y/n)"
if ($openVscode -eq 'y') {
    code .
}

Write-Host "`nüëç –£–¥–∞—á–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–æ–µ–∫—Ç–æ–º WASSER!" -ForegroundColor Cyan