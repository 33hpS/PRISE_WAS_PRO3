-- üëë –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ —Ä–æ–ª–∏ –∞–¥–º–∏–Ω–∞ –¥–ª—è sherhan1988hp@gmail.com
-- –í—ã–ø–æ–ª–Ω–∏—Ç–µ –≤ Supabase SQL Editor

-- 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
DO $$
DECLARE
    user_exists BOOLEAN;
    user_uuid UUID;
BEGIN
    -- –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    SELECT EXISTS(
        SELECT 1 FROM auth.users 
        WHERE email = 'sherhan1988hp@gmail.com'
    ) INTO user_exists;
    
    IF user_exists THEN
        -- –ü–æ–ª—É—á–∞–µ–º UUID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        SELECT id INTO user_uuid 
        FROM auth.users 
        WHERE email = 'sherhan1988hp@gmail.com';
        
        RAISE NOTICE '‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω: %', user_uuid;
        
        -- –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É user_roles –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        CREATE TABLE IF NOT EXISTS public.user_roles (
            id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
            user_id UUID REFERENCES auth.users(id) ON DELETE CASCADE,
            role TEXT NOT NULL CHECK (role IN ('admin', 'manager')),
            created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
            updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
            UNIQUE(user_id)
        );
        
        -- –î–æ–±–∞–≤–ª—è–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Ä–æ–ª—å –∞–¥–º–∏–Ω–∞
        INSERT INTO public.user_roles (user_id, role)
        VALUES (user_uuid, 'admin')
        ON CONFLICT (user_id) 
        DO UPDATE SET 
            role = 'admin',
            updated_at = NOW();
        
        RAISE NOTICE 'üéâ –†–æ–ª—å –∞–¥–º–∏–Ω–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –¥–ª—è sherhan1988hp@gmail.com';
        
    ELSE
        RAISE NOTICE '‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å sherhan1988hp@gmail.com –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ auth.users';
        RAISE NOTICE '–£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ —Å–∏—Å—Ç–µ–º–µ';
    END IF;
END $$;

-- 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
SELECT 
    u.email,
    ur.role,
    ur.created_at,
    ur.updated_at
FROM auth.users u
LEFT JOIN public.user_roles ur ON u.id = ur.user_id
WHERE u.email = 'sherhan1988hp@gmail.com';

-- 3. –í–∫–ª—é—á–∞–µ–º RLS –µ—Å–ª–∏ –æ—Ç–∫–ª—é—á–µ–Ω
ALTER TABLE IF EXISTS public.user_roles ENABLE ROW LEVEL SECURITY;

-- 4. –°–æ–∑–¥–∞–µ–º –ø–æ–ª–∏—Ç–∏–∫–∏ –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
DO $$
BEGIN
    -- –ü–æ–ª–∏—Ç–∏–∫–∞ –¥–ª—è —á—Ç–µ–Ω–∏—è —Å–≤–æ–µ–π —Ä–æ–ª–∏
    IF NOT EXISTS (
        SELECT 1 FROM pg_policies 
        WHERE tablename = 'user_roles' 
        AND policyname = 'Users can view own role'
    ) THEN
        CREATE POLICY "Users can view own role" ON public.user_roles
            FOR SELECT USING (user_id = auth.uid());
    END IF;
    
    -- –ü–æ–ª–∏—Ç–∏–∫–∞ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
    IF NOT EXISTS (
        SELECT 1 FROM pg_policies 
        WHERE tablename = 'user_roles' 
        AND policyname = 'Admins can manage all roles'
    ) THEN
        CREATE POLICY "Admins can manage all roles" ON public.user_roles
            FOR ALL USING (
                EXISTS (
                    SELECT 1 FROM public.user_roles 
                    WHERE user_id = auth.uid() AND role = 'admin'
                )
            );
    END IF;
END $$;

-- 5. –°–æ–∑–¥–∞–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
CREATE OR REPLACE FUNCTION public.get_user_role(check_user_id UUID DEFAULT auth.uid())
RETURNS TEXT
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
DECLARE
    user_role TEXT;
BEGIN
    IF check_user_id IS NULL THEN
        RETURN NULL;
    END IF;
    
    SELECT role INTO user_role 
    FROM public.user_roles 
    WHERE user_id = check_user_id;
    
    -- –ï—Å–ª–∏ —Ä–æ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, —Å–æ–∑–¥–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—É—é
    IF user_role IS NULL THEN
        -- –ü—Ä–æ–≤–µ—Ä—è–µ–º email –¥–ª—è sherhan1988hp@gmail.com
        SELECT 
            CASE 
                WHEN email = 'sherhan1988hp@gmail.com' THEN 'admin'
                WHEN email = 'admin@wasser.com' THEN 'admin'
                ELSE 'manager'
            END INTO user_role
        FROM auth.users 
        WHERE id = check_user_id;
        
        -- –°–æ–∑–¥–∞–µ–º —Ä–æ–ª—å
        IF user_role IS NOT NULL THEN
            INSERT INTO public.user_roles (user_id, role) 
            VALUES (check_user_id, user_role)
            ON CONFLICT (user_id) DO UPDATE SET role = EXCLUDED.role;
        ELSE
            user_role := 'manager';
        END IF;
    END IF;
    
    RETURN COALESCE(user_role, 'manager');
END;
$$;

CREATE OR REPLACE FUNCTION public.is_admin(check_user_id UUID DEFAULT auth.uid())
RETURNS BOOLEAN
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
BEGIN
    RETURN public.get_user_role(check_user_id) = 'admin';
END;
$$;

-- 6. –î–∞–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ —Ñ—É–Ω–∫—Ü–∏–∏
GRANT EXECUTE ON FUNCTION public.get_user_role(UUID) TO authenticated, anon;
GRANT EXECUTE ON FUNCTION public.is_admin(UUID) TO authenticated, anon;

-- 7. –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö —Ä–æ–ª–µ–π
DO $
BEGIN
    RAISE NOTICE 'üìä –¢–ï–ö–£–©–ò–ï –†–û–õ–ò –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô:';
    RAISE NOTICE '‚úÖ –ì–û–¢–û–í–û! Sherhan –Ω–∞–∑–Ω–∞—á–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!';
END $;

-- –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –ø–æ–∫–∞–∂–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç
SELECT 
    u.email,
    COALESCE(ur.role, '–ù–ï–¢ –†–û–õ–ò') as role,
    public.get_user_role(u.id) as function_role,
    public.is_admin(u.id) as is_admin
FROM auth.users u
LEFT JOIN public.user_roles ur ON u.id = ur.user_id
ORDER BY u.created_at;
