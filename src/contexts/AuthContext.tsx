/**
 * @file contexts/AuthContext.tsx
 * @description –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–ª—è WASSER
 * 
 * –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:
 * - –¢–∏–ø–æ–±–µ–∑–æ–ø–∞—Å–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ —Å TypeScript
 * - –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Supabase Auth
 * - React.memo –∏ useMemo –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
 * - –ü–æ–ª–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */

import React, { 
  createContext, 
  useContext, 
  useEffect, 
  useState, 
  useMemo, 
  useCallback,
  ReactNode 
} from 'react'
import { User, Session } from '@supabase/supabase-js'
import { supabase } from '../lib/supabase'

// ===========================
// üéØ –¢–ò–ü–û–ë–ï–ó–û–ü–ê–°–ù–´–ï –ò–ù–¢–ï–†–§–ï–ô–°–´
// ===========================

export interface AuthUser extends User {
  readonly isAdmin?: boolean
  readonly role?: 'admin' | 'manager' | 'viewer'
  readonly permissions?: readonly string[]
}

export interface AuthState {
  readonly user: AuthUser | null
  readonly session: Session | null
  readonly isLoading: boolean
  readonly isAuthenticated: boolean
  readonly error: string | null
}

export interface AuthContextValue extends AuthState {
  // –ú–µ—Ç–æ–¥—ã –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
  readonly signIn: (email: string, password: string) => Promise<{ error: any }>
  readonly signUp: (email: string, password: string) => Promise<{ error: any }>
  readonly signOut: () => Promise<void>
  readonly clearError: () => void
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
  readonly isAdmin: boolean
  readonly hasPermission: (permission: string) => boolean
}

// ===========================
// üèóÔ∏è –ö–û–ù–¢–ï–ö–°–¢ –ò –ü–†–û–í–ê–ô–î–ï–†
// ===========================

const AuthContext = createContext<AuthContextValue | null>(null)

interface AuthProviderProps {
  readonly children: ReactNode
}

export const AuthProvider: React.FC<AuthProviderProps> = React.memo(({ children }) => {
  // –û—Å–Ω–æ–≤–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
  const [user, setUser] = useState<AuthUser | null>(null)
  const [session, setSession] = useState<Session | null>(null)
  const [isLoading, setIsLoading] = useState<boolean>(true)
  const [error, setError] = useState<string | null>(null)

  // ===========================
  // üîê –ü–†–û–í–ï–†–ö–ê –ê–î–ú–ò–ù–°–ö–ò–• –ü–†–ê–í
  // ===========================
  
  const isAdmin = useMemo(() => {
    if (!user?.email) return false
    
    const adminEmails = [
      process.env.VITE_ADMIN_EMAIL_1,
      process.env.VITE_ADMIN_EMAIL_2,
      process.env.VITE_ADMIN_EMAIL_3,
      'admin@wasser.ru',  // Fallback email
    ].filter(Boolean)
    
    return adminEmails.includes(user.email)
  }, [user?.email])

  // ===========================
  // üì± –ú–ï–¢–û–î–´ –ê–£–¢–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–ò
  // ===========================

  const signIn = useCallback(async (email: string, password: string) => {
    setIsLoading(true)
    setError(null)
    
    try {
      const { data, error } = await supabase.auth.signInWithPassword({
        email,
        password,
      })
      
      if (error) {
        setError(error.message)
        return { error }
      }
      
      return { error: null }
    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : '–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞'
      setError(errorMessage)
      return { error: err }
    } finally {
      setIsLoading(false)
    }
  }, [])

  const signUp = useCallback(async (email: string, password: string) => {
    setIsLoading(true)
    setError(null)
    
    try {
      const { data, error } = await supabase.auth.signUp({
        email,
        password,
        options: {
          emailRedirectTo: `${window.location.origin}/dashboard`
        }
      })
      
      if (error) {
        setError(error.message)
        return { error }
      }
      
      return { error: null }
    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : '–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏'
      setError(errorMessage)
      return { error: err }
    } finally {
      setIsLoading(false)
    }
  }, [])

  const signOut = useCallback(async () => {
    setIsLoading(true)
    try {
      await supabase.auth.signOut()
      setUser(null)
      setSession(null)
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞:', err)
    } finally {
      setIsLoading(false)
    }
  }, [])

  const clearError = useCallback(() => {
    setError(null)
  }, [])

  // ===========================
  // üõ°Ô∏è –ü–†–û–í–ï–†–ö–ê –†–ê–ó–†–ï–®–ï–ù–ò–ô
  // ===========================

  const hasPermission = useCallback((permission: string): boolean => {
    if (!user) return false
    if (isAdmin) return true // –ê–¥–º–∏–Ω—ã –∏–º–µ—é—Ç –≤—Å–µ –ø—Ä–∞–≤–∞
    
    // –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ API
    const userPermissions = user.permissions || []
    return userPermissions.includes(permission)
  }, [user, isAdmin])

  // ===========================
  // üîÑ –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ò –ü–û–î–ü–ò–°–ö–ò
  // ===========================

  useEffect(() => {
    let mounted = true

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏
    const initializeAuth = async () => {
      try {
        const { data: { session }, error } = await supabase.auth.getSession()
        
        if (mounted) {
          if (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏:', error)
            setError(error.message)
          } else {
            setSession(session)
            setUser(session?.user as AuthUser || null)
          }
          setIsLoading(false)
        }
      } catch (err) {
        if (mounted) {
          console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ auth:', err)
          setIsLoading(false)
        }
      }
    }

    initializeAuth()

    // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    const { data: { subscription } } = supabase.auth.onAuthStateChange(
      async (event, session) => {
        if (!mounted) return

        console.log('Auth state changed:', event, session?.user?.email)
        
        setSession(session)
        setUser(session?.user as AuthUser || null)
        setIsLoading(false)

        if (event === 'SIGNED_OUT') {
          setUser(null)
          setSession(null)
        }
      }
    )

    return () => {
      mounted = false
      subscription?.unsubscribe()
    }
  }, [])

  // ===========================
  // üíæ –ú–ï–ú–û–ò–ó–ò–†–û–í–ê–ù–ù–û–ï –ó–ù–ê–ß–ï–ù–ò–ï –ö–û–ù–¢–ï–ö–°–¢–ê
  // ===========================

  const contextValue = useMemo<AuthContextValue>(() => ({
    // –°–æ—Å—Ç–æ—è–Ω–∏–µ
    user,
    session,
    isLoading,
    isAuthenticated: !!user,
    error,
    
    // –ú–µ—Ç–æ–¥—ã
    signIn,
    signUp,
    signOut,
    clearError,
    
    // –†–∞–∑—Ä–µ—à–µ–Ω–∏—è
    isAdmin,
    hasPermission,
  }), [
    user,
    session,
    isLoading,
    error,
    signIn,
    signUp,
    signOut,
    clearError,
    isAdmin,
    hasPermission,
  ])

  return (
    <AuthContext.Provider value={contextValue}>
      {children}
    </AuthContext.Provider>
  )
})

AuthProvider.displayName = 'AuthProvider'

// ===========================
// ü™ù –ö–ê–°–¢–û–ú–ù–´–ô –•–£–ö
// ===========================

export const useAuthContext = (): AuthContextValue => {
  const context = useContext(AuthContext)
  if (!context) {
    throw new Error('useAuthContext –¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤–Ω—É—Ç—Ä–∏ AuthProvider')
  }
  return context
}

// ===========================
// üõ°Ô∏è HOC –î–õ–Ø –ó–ê–©–ò–©–ï–ù–ù–´–• –ú–ê–†–®–†–£–¢–û–í
// ===========================

interface RequireAuthProps {
  readonly children: ReactNode
  readonly fallback?: ReactNode
  readonly requireAdmin?: boolean
}

export const RequireAuth: React.FC<RequireAuthProps> = React.memo(({
  children,
  fallback,
  requireAdmin = false
}) => {
  const { isAuthenticated, isAdmin, isLoading } = useAuthContext()

  if (isLoading) {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600"></div>
      </div>
    )
  }

  if (!isAuthenticated) {
    return fallback || <div>–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è</div>
  }

  if (requireAdmin && !isAdmin) {
    return <div>–ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞</div>
  }

  return <>{children}</>
})

RequireAuth.displayName = 'RequireAuth'

export default AuthContext
