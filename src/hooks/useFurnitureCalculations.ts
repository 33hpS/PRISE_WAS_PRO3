/**
 * @file hooks/useFurnitureCalculations.ts
 * @description –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ö—É–∫ –¥–ª—è —Ä–∞—Å—á–µ—Ç–æ–≤ –º–µ–±–µ–ª—å–Ω–æ–π —Ñ–∞–±—Ä–∏–∫–∏ —Å –º–µ–º–æ–∏–∑–∞—Ü–∏–µ–π
 */

import { useMemo, useCallback } from 'react'
import type { 
  FurnitureMaterial, 
  FurnitureCollection, 
  PriceCalculation,
  CollectionMultiplierFunction,
  MaterialsCostFunction
} from '../types'

// ===========================
// üéØ –ö–û–ù–°–¢–ê–ù–¢–´ –ò –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø
// ===========================

/** –ú–Ω–æ–∂–∏—Ç–µ–ª–∏ –∫–æ–ª–ª–µ–∫—Ü–∏–π */
const COLLECTION_MULTIPLIERS: Record<string, number> = {
  '–ø—Ä–µ–º–∏—É–º': 1.8,
  '–ª—é–∫—Å': 1.5,
  '—Å—Ç–∞–Ω–¥–∞—Ä—Ç': 1.2,
  '—ç–∫–æ–Ω–æ–º': 1.0,
  '–±–∞–∑–æ–≤—ã–π': 0.9
} as const

/** –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –Ω–∞—Ü–µ–Ω–∫–∞ */
const MIN_MARKUP_PERCENT = 20

interface UseFurnitureCalculationsProps {
  readonly materials: readonly FurnitureMaterial[]
  readonly collections: readonly FurnitureCollection[]
  readonly basePrice: number
  readonly selectedCollection: string
  readonly materialQuantities: Record<string, number>
  readonly customMarkup?: number
}

/**
 * –•—É–∫ –¥–ª—è —Ä–∞—Å—á–µ—Ç–æ–≤ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –º–µ–±–µ–ª–∏ —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
 */
export const useFurnitureCalculations = ({
  materials,
  collections,
  basePrice,
  selectedCollection,
  materialQuantities,
  customMarkup
}: UseFurnitureCalculationsProps) => {

  // ===========================
  // üßÆ –ß–ò–°–¢–´–ï –§–£–ù–ö–¶–ò–ò –†–ê–°–ß–ï–¢–ê
  // ===========================

  /** –¢–∏–ø–æ–±–µ–∑–æ–ø–∞—Å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ä–∞—Å—á–µ—Ç–∞ –º–Ω–æ–∂–∏—Ç–µ–ª—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏ */
  const getCollectionMultiplier: CollectionMultiplierFunction = useCallback(
    (collection: string) => {
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤ –±–∞–∑–µ –∫–æ–ª–ª–µ–∫—Ü–∏–π
      const collectionData = collections.find(c => 
        c.name.toLowerCase() === collection.toLowerCase() && c.isActive
      )
      
      if (collectionData) {
        return collectionData.multiplier
      }
      
      // Fallback –Ω–∞ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –º–Ω–æ–∂–∏—Ç–µ–ª–∏
      const normalizedCollection = collection.toLowerCase()
      return COLLECTION_MULTIPLIERS[normalizedCollection] ?? 1.0
    },
    [collections]
  )

  /** –§—É–Ω–∫—Ü–∏—è —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ */
  const calculateMaterialsCost: MaterialsCostFunction = useCallback(
    (materialsData, quantities) => {
      return materialsData.reduce((total, material) => {
        if (!material.isActive) return total
        
        const quantity = quantities[material.id] || 0
        const cost = material.price * quantity * material.consumptionCoeff
        
        return total + cost
      }, 0)
    },
    []
  )

  // ===========================
  // üéØ –ú–ï–ú–û–ò–ó–ò–†–û–í–ê–ù–ù–´–ï –í–´–ß–ò–°–õ–ï–ù–ò–Ø
  // ===========================

  /** –°—Ç–æ–∏–º–æ—Å—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ —Å –º–µ–º–æ–∏–∑–∞—Ü–∏–µ–π */
  const materialsCost = useMemo(() => {
    return calculateMaterialsCost(materials, materialQuantities)
  }, [materials, materialQuantities, calculateMaterialsCost])

  /** –ú–Ω–æ–∂–∏—Ç–µ–ª—å –∫–æ–ª–ª–µ–∫—Ü–∏–∏ —Å –º–µ–º–æ–∏–∑–∞—Ü–∏–µ–π */
  const collectionMultiplier = useMemo(() => {
    return getCollectionMultiplier(selectedCollection)
  }, [selectedCollection, getCollectionMultiplier])

  /** –ü–æ–ª–Ω—ã–π —Ä–∞—Å—á–µ—Ç —Ü–µ–Ω—ã */
  const priceCalculation = useMemo<PriceCalculation>(() => {
    const subtotal = basePrice + materialsCost
    const finalPrice = subtotal * collectionMultiplier
    const markup = finalPrice - subtotal
    const profitMargin = subtotal > 0 ? (markup / subtotal) * 100 : 0

    return {
      basePrice,
      materialsCost,
      collectionMultiplier,
      finalPrice,
      markup,
      profitMargin: Math.max(profitMargin, MIN_MARKUP_PERCENT)
    }
  }, [basePrice, materialsCost, collectionMultiplier])

  /** –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ */
  const materialsBreakdown = useMemo(() => {
    return materials
      .filter(material => material.isActive && materialQuantities[material.id] > 0)
      .map(material => {
        const quantity = materialQuantities[material.id]
        const cost = material.price * quantity * material.consumptionCoeff
        
        return {
          id: material.id,
          name: material.name,
          quantity,
          unitPrice: material.price,
          coefficient: material.consumptionCoeff,
          cost,
          unit: material.unit,
          category: material.category
        }
      })
      .sort((a, b) => b.cost - a.cost) // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —É–±—ã–≤–∞–Ω–∏—é —Å—Ç–æ–∏–º–æ—Å—Ç–∏
  }, [materials, materialQuantities])

  // ===========================
  // üõ†Ô∏è UTILITY –§–£–ù–ö–¶–ò–ò
  // ===========================

  /** –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Ä–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç–∏ */
  const isRentable = useMemo(() => {
    return priceCalculation.profitMargin >= MIN_MARKUP_PERCENT
  }, [priceCalculation.profitMargin])

  /** –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è —Ü–µ–Ω–∞ */
  const recommendedPrice = useMemo(() => {
    if (isRentable) return priceCalculation.finalPrice
    
    const minPrice = (basePrice + materialsCost) * (1 + MIN_MARKUP_PERCENT / 100)
    return minPrice * collectionMultiplier
  }, [isRentable, priceCalculation.finalPrice, basePrice, materialsCost, collectionMultiplier])

  /** –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–∞ */
  const exportData = useMemo(() => ({
    article: `WASSER-${selectedCollection.toUpperCase()}-${Date.now()}`,
    collection: selectedCollection,
    basePrice: priceCalculation.basePrice,
    materialsCost: priceCalculation.materialsCost,
    finalPrice: priceCalculation.finalPrice,
    markup: priceCalculation.markup,
    materials: materialsBreakdown
  }), [selectedCollection, priceCalculation, materialsBreakdown])

  return {
    // –û—Å–Ω–æ–≤–Ω—ã–µ —Ä–∞—Å—á–µ—Ç—ã
    materialsCost,
    collectionMultiplier,
    priceCalculation,
    
    // –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è
    materialsBreakdown,
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è
    isRentable,
    recommendedPrice,
    
    // –≠–∫—Å–ø–æ—Ä—Ç
    exportData,
    
    // Utility —Ñ—É–Ω–∫—Ü–∏–∏
    getCollectionMultiplier,
    calculateMaterialsCost
  }
}
