/**
 * @file hooks/useUserPermissions.ts  
 * @description –•—É–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∞–≤–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π
 */

import { useMemo, useCallback } from 'react'
import { UserWithRole, UserRole } from '../../types/dashboard/types'
import { PERMISSIONS_CONFIG, hasTabAccess, getAvailableTabs, isAdminUser } from '../../config/dashboard/permissions'
import { DashboardStorage } from '../../services/dashboard/storage'

// ===========================
//üîí –¢–ò–ü –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò –ü–†–ê–í
//===========================

interface PermissionsDiagnostics {
  readonly userRole: UserRole | null
  readonly userEmail: string | null
  readonly isAdminByEmail: boolean
  readonly isAdminByRole: boolean
  readonly testUser: any
  readonly supabaseUser: any
  readonly availableTabsCount: number
  readonly adminTabsCount: number
  readonly timestamp: Date
}

interface UserPermissionsResult {
  readonly isAdmin: boolean
  readonly availableTabs: readonly string[]
  readonly diagnostics: PermissionsDiagnostics
  readonly hasPermission: (feature: string) => boolean
  readonly canAccessTab: (tab: string) => boolean
}

// ===========================
//üé£ –•–£–ö –ü–†–ê–í –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø
//===========================

export const useUserPermissions = (user: UserWithRole | null): UserPermissionsResult => {
  // –ú–µ–º–æ–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–∞–≤
  const diagnostics = useMemo<PermissionsDiagnostics>(() => {
    const testUser = DashboardStorage.getTestUser()
    const supabaseUser = DashboardStorage.getSupabaseUser()
    
    return {
      userRole: user?.role || null,
      userEmail: user?.email || null,
      isAdminByEmail: user?.email ? isAdminUser(user.email) : false,
      isAdminByRole: user?.role === 'admin',
      testUser,
      supabaseUser,
      availableTabsCount: user ? getAvailableTabs(user.role, user.email).length : 0,
      adminTabsCount: Object.values(PERMISSIONS_CONFIG.tabPermissions).filter(p => p.adminOnly).length,
      timestamp: new Date()
    }
  }, [user])

  // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö –ø—Ä–∞–≤
  const isAdmin = useMemo(() => {
    if (!user) return false

    // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ–ª–∏ –∞–¥–º–∏–Ω–∞
    if (user.role === 'admin') {
      console.log('‚úÖ Admin –ø—Ä–∞–≤–∞ –ø–æ —Ä–æ–ª–∏:', user.role)
      return true
    }

    // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ email
    if (user.email && isAdminUser(user.email)) {
      console.log('‚úÖ Admin –ø—Ä–∞–≤–∞ –ø–æ email:', user.email)
      return true
    }

    // 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ localStorage (test-user)
    const testUser = DashboardStorage.getTestUser()
    if (testUser?.role === 'admin') {
      console.log('‚úÖ Admin –ø—Ä–∞–≤–∞ —á–µ—Ä–µ–∑ test-user:', testUser)
      return true
    }

    // 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ localStorage (supabase-user)
    const supabaseUser = DashboardStorage.getSupabaseUser()
    if (supabaseUser?.role === 'admin') {
      console.log('‚úÖ Admin –ø—Ä–∞–≤–∞ —á–µ—Ä–µ–∑ supabase-user:', supabaseUser)
      return true
    }

    console.log('‚ùå –ù–µ—Ç admin –ø—Ä–∞–≤:', diagnostics)
    return false
  }, [user, diagnostics])

  // –î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∫–ª–∞–¥–∫–∏
  const availableTabs = useMemo(() => {
    if (!user) return []
    return getAvailableTabs(user.role, user.email)
  }, [user])

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º
  const hasPermission = useCallback((feature: string): boolean => {
    if (!user) return false
    if (isAdmin) return true
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    return user.permissions?.includes(feature) || false
  }, [user, isAdmin])

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –≤–∫–ª–∞–¥–∫–µ
  const canAccessTab = useCallback((tab: string): boolean => {
    if (!user) return false
    return hasTabAccess(tab as any, user.role, user.email)
  }, [user])

  // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
  if (process.env.NODE_ENV === 'development') {
    console.group('üîí User Permissions Diagnostics')
    console.log('User:', user)
    console.log('Is Admin:', isAdmin)
    console.log('Available Tabs:', availableTabs.length)
    console.log('Diagnostics:', diagnostics)
    console.groupEnd()
  }

  return {
    isAdmin,
    availableTabs,
    diagnostics,
    hasPermission,
    canAccessTab
  }
}

// ===========================
//üé£ –•–£–ö –§–ò–õ–¨–¢–†–ê–¶–ò–ò –í–ö–õ–ê–î–û–ö
//===========================

export const useDashboardTabs = (isAdmin: boolean) => {
  return useMemo(() => {
    // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –∏–º–ø–æ—Ä—Ç TAB_DEFINITIONS –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
    // const availableTabs = TAB_DEFINITIONS.filter(tab => !tab.adminOnly || isAdmin)
    
    console.log('üîç –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –≤–∫–ª–∞–¥–æ–∫:', {
      isAdmin,
      // totalTabs: TAB_DEFINITIONS.length,
      // availableTabs: availableTabs.length,
    })

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤–∫–ª–∞–¥–∫–∏
    return [] // –ó–∞–≥–ª—É—à–∫–∞, –±—É–¥–µ—Ç –∑–∞–º–µ–Ω–µ–Ω–∞ –ø—Ä–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
  }, [isAdmin])
}

// ===========================
//üé£ –•–£–ö –ê–í–¢–û–†–ò–ó–ê–¶–ò–ò
//===========================

export const useAuth = () => {
  const logout = useCallback(async () => {
    try {
      // –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
      DashboardStorage.clearAuthData()
      DashboardStorage.clearDashboardData()

      // –í—ã—Ö–æ–¥ –∏–∑ Supabase
      const { supabase } = await import('../../lib/supabase')
      await supabase.auth.signOut()

      // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ login
      window.location.href = '/login'
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ:', error)
      // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥ –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
      window.location.href = '/login'
    }
  }, [])

  const login = useCallback(async (email: string, password: string) => {
    try {
      const { supabase } = await import('../../lib/supabase')
      const { data, error } = await supabase.auth.signInWithPassword({
        email,
        password
      })

      if (error) throw error
      return data.user
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞:', error)
      throw error
    }
  }, [])

  return { login, logout }
}

