/**
 * @file utils/furniture.ts
 * @description –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã –¥–ª—è –º–µ–±–µ–ª—å–Ω–æ–π —Ñ–∞–±—Ä–∏–∫–∏ —Å –º–µ–º–æ–∏–∑–∞—Ü–∏–µ–π
 */

import { 
  FurnitureMaterial, 
  FurnitureCollection, 
  PriceCalculationResult,
  COLLECTION_MULTIPLIERS,
  CollectionName
} from '../types'

// ===========================
// üßÆ –ß–ò–°–¢–´–ï –§–£–ù–ö–¶–ò–ò –†–ê–°–ß–ï–¢–ê
// ===========================

/**
 * –¢–∏–ø–æ–±–µ–∑–æ–ø–∞—Å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–Ω–æ–∂–∏—Ç–µ–ª—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Ç–∏–ø–æ–≤
 */
export const getCollectionMultiplier = (collection: string): number => {
  const normalizedCollection = collection.toLowerCase() as CollectionName
  return COLLECTION_MULTIPLIERS[normalizedCollection] ?? 1.0
}

/**
 * –§—É–Ω–∫—Ü–∏—è —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ —Å –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞–º–∏ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è
 * –ò–º–º—É—Ç–∞–±–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –±–µ–∑ –ø–æ–±–æ—á–Ω—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
 */
export const calculateMaterialsCost = (
  materials: readonly FurnitureMaterial[],
  quantities: Record<string, number>
): number => {
  return materials.reduce((total, material) => {
    if (!material.isActive) return total
    
    const quantity = quantities[material.id] || 0
    const cost = material.price * quantity * material.consumptionCoeff
    
    return total + cost
  }, 0)
}

/**
 * –ü–æ–ª–Ω—ã–π —Ä–∞—Å—á–µ—Ç —Ü–µ–Ω—ã –∏–∑–¥–µ–ª–∏—è —Å —É—á–µ—Ç–æ–º –≤—Å–µ—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
 */
export const calculateFurniturePrice = (
  basePrice: number,
  collection: string,
  materials: readonly FurnitureMaterial[],
  quantities: Record<string, number>
): PriceCalculationResult => {
  const materialsCost = calculateMaterialsCost(materials, quantities)
  const collectionMultiplier = getCollectionMultiplier(collection)
  
  const subtotal = basePrice + materialsCost
  const finalPrice = subtotal * collectionMultiplier
  const markup = finalPrice - subtotal
  const profitMargin = subtotal > 0 ? (markup / subtotal) * 100 : 0
  
  return {
    basePrice,
    materialsCost,
    collectionMultiplier,
    finalPrice,
    markup,
    profitMargin,
    isRentable: profitMargin >= 20 // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ä–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—å 20%
  } as const
}

/**
 * –§—É–Ω–∫—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ü–µ–Ω—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
 */
export const formatPrice = (price: number): string => {
  return new Intl.NumberFormat('ru-RU', {
    style: 'currency',
    currency: 'RUB',
    minimumFractionDigits: 0,
    maximumFractionDigits: 0
  }).format(price)
}

/**
 * –§—É–Ω–∫—Ü–∏—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
 */
export const getActiveMaterials = (
  materials: readonly FurnitureMaterial[]
): readonly FurnitureMaterial[] => {
  return materials.filter(material => material.isActive)
}

/**
 * –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
 */
export const groupMaterialsByCategory = (
  materials: readonly FurnitureMaterial[]
): Record<string, readonly FurnitureMaterial[]> => {
  return materials.reduce((groups, material) => {
    const category = material.category
    return {
      ...groups,
      [category]: [...(groups[category] || []), material]
    }
  }, {} as Record<string, readonly FurnitureMaterial[]>)
}

/**
 * –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑–¥–µ–ª–∏—è
 */
export const validateFurnitureProduct = (product: {
  article: string
  name: string
  basePrice: number
}): { isValid: boolean; errors: readonly string[] } => {
  const errors: string[] = []
  
  if (!product.article?.trim()) {
    errors.push('–ê—Ä—Ç–∏–∫—É–ª –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω')
  }
  
  if (!product.name?.trim()) {
    errors.push('–ù–∞–∑–≤–∞–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ')
  }
  
  if (typeof product.basePrice !== 'number' || product.basePrice <= 0) {
    errors.push('–ë–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º')
  }
  
  return {
    isValid: errors.length === 0,
    errors: errors as readonly string[]
  }
}

// ===========================
// üé® –§–£–ù–ö–¶–ò–ò –î–õ–Ø –ì–ï–ù–ï–†–ê–¶–ò–ò PDF
// ===========================

/**
 * –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–∞
 */
export const preparePriceListData = (
  products: readonly any[],
  materials: readonly FurnitureMaterial[],
  quantities: Record<string, Record<string, number>>
) => {
  return products.map(product => {
    const productQuantities = quantities[product.id] || {}
    const calculation = calculateFurniturePrice(
      product.basePrice,
      product.collection,
      materials,
      productQuantities
    )
    
    return {
      article: product.article,
      name: product.name,
      collection: product.collection,
      basePrice: product.basePrice,
      materialsCost: calculation.materialsCost,
      finalPrice: calculation.finalPrice,
      markup: calculation.markup,
      profitMargin: calculation.profitMargin,
      materials: materials
        .filter(m => productQuantities[m.id] > 0)
        .map(m => ({
          name: m.name,
          quantity: productQuantities[m.id],
          cost: m.price * productQuantities[m.id] * m.consumptionCoeff,
          unit: m.unit
        }))
    }
  })
}
