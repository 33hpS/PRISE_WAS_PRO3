import React, { useState, useEffect } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { TrendingUp, TrendingDown, Minus, RefreshCw } from 'lucide-react';

// –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Ç–∏–ø –¥–ª—è –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç
export interface NormalizedRate {
  code: string;
  name: string;
  rate: number;
  change: number;
  flag: string;      // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ flag
  perUnit: number;   // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ perUnit
}

interface CurrencyRatesCardProps {
  onRatesUpdate?: (rates: Record<string, NormalizedRate>) => void;
}

const CurrencyRatesCard: React.FC<CurrencyRatesCardProps> = ({ onRatesUpdate }) => {
  const [rates, setRates] = useState<Record<string, NormalizedRate>>({
    USD: {
      code: 'USD',
      name: '–î–æ–ª–ª–∞—Ä –°–®–ê',
      rate: 90.5,
      change: 0.5,
      flag: 'üá∫üá∏',
      perUnit: 1
    },
    EUR: {
      code: 'EUR',
      name: '–ï–≤—Ä–æ',
      rate: 98.2,
      change: -0.3,
      flag: 'üá™üá∫',
      perUnit: 1
    },
    CNY: {
      code: 'CNY',
      name: '–ö–∏—Ç–∞–π—Å–∫–∏–π —é–∞–Ω—å',
      rate: 12.4,
      change: 0.1,
      flag: 'üá®üá≥',
      perUnit: 10
    },
    TRY: {
      code: 'TRY',
      name: '–¢—É—Ä–µ—Ü–∫–∞—è –ª–∏—Ä–∞',
      rate: 2.8,
      change: -0.05,
      flag: 'üáπüá∑',
      perUnit: 10
    }
  });

  const [loading, setLoading] = useState(false);
  const [lastUpdate, setLastUpdate] = useState<Date>(new Date());

  // –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –∫—É—Ä—Å–æ–≤ (mock)
  const fetchRates = async () => {
    setLoading(true);
    
    // –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
    setTimeout(() => {
      const updatedRates = { ...rates };
      
      // –°–∏–º—É–ª–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∫—É—Ä—Å–æ–≤
      Object.keys(updatedRates).forEach(key => {
        const randomChange = (Math.random() - 0.5) * 2; // –æ—Ç -1 –¥–æ 1
        updatedRates[key] = {
          ...updatedRates[key],
          rate: updatedRates[key].rate * (1 + randomChange / 100),
          change: randomChange
        };
      });
      
      setRates(updatedRates);
      setLastUpdate(new Date());
      setLoading(false);
      
      if (onRatesUpdate) {
        onRatesUpdate(updatedRates);
      }
    }, 1000);
  };

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∫–æ–Ω–∫–∏ —Ç—Ä–µ–Ω–¥–∞
  const getTrendIcon = (change: number) => {
    if (change > 0) return <TrendingUp className="w-4 h-4 text-green-500" />;
    if (change < 0) return <TrendingDown className="w-4 h-4 text-red-500" />;
    return <Minus className="w-4 h-4 text-gray-400" />;
  };

  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è
  const formatChange = (change: number): string => {
    const sign = change >= 0 ? '+' : '';
    return `${sign}${change.toFixed(2)}%`;
  };

  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
  const formatLastUpdate = (): string => {
    return lastUpdate.toLocaleTimeString('ru-RU', {
      hour: '2-digit',
      minute: '2-digit'
    });
  };

  return (
    <Card>
      <CardHeader className="flex flex-row items-center justify-between">
        <CardTitle>–ö—É—Ä—Å—ã –≤–∞–ª—é—Ç</CardTitle>
        <Button
          variant="outline"
          size="sm"
          onClick={fetchRates}
          disabled={loading}
        >
          <RefreshCw className={`h-4 w-4 mr-2 ${loading ? 'animate-spin' : ''}`} />
          –û–±–Ω–æ–≤–∏—Ç—å
        </Button>
      </CardHeader>
      <CardContent>
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
          {Object.values(rates).map((rate) => (
            <div key={rate.code} className="space-y-2">
              <div className="flex items-center justify-between">
                <div className="flex items-center space-x-2">
                  <span className="text-2xl">{rate.flag}</span>
                  <div>
                    <div className="font-medium">{rate.code}</div>
                    <div className="text-xs text-gray-500">
                      {rate.perUnit > 1 ? `–∑–∞ ${rate.perUnit} –µ–¥–∏–Ω–∏—Ü` : '–∑–∞ 1 –µ–¥–∏–Ω–∏—Ü—É'}
                    </div>
                  </div>
                </div>
                {getTrendIcon(rate.change)}
              </div>
              <div className="flex items-baseline justify-between">
                <span className="text-2xl font-bold">
                  {rate.rate.toFixed(2)}
                </span>
                <span className={`text-sm ${
                  rate.change >= 0 ? 'text-green-600' : 'text-red-600'
                }`}>
                  {formatChange(rate.change)}
                </span>
              </div>
            </div>
          ))}
        </div>
        <div className="mt-4 text-xs text-gray-500 text-center">
          –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {formatLastUpdate()}
        </div>
      </CardContent>
    </Card>
  );
};

export default CurrencyRatesCard;