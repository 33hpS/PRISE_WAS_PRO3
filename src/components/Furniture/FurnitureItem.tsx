/**
 * @file components/Furniture/FurnitureItem.tsx
 * @description –¢–∏–ø–æ–±–µ–∑–æ–ø–∞—Å–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —ç–ª–µ–º–µ–Ω—Ç–∞ –º–µ–±–µ–ª–∏ —Å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º –ø–æ–¥—Ö–æ–¥–æ–º
 */

import React, { useMemo } from 'react'
import { Card, CardContent, CardHeader, CardTitle } from '../ui/card'
import { Badge } from '../ui/badge'
import { Button } from '../ui/button'
import { Package, Ruler, Tag, Calculator } from 'lucide-react'
import type { FurnitureProduct, FurnitureMaterial } from '../../types'
import { useFurnitureCalculations } from '../../hooks'

// ===========================
// üéØ –ò–ù–¢–ï–†–§–ï–ô–°–´ –ö–û–ú–ü–û–ù–ï–ù–¢–ê
// ===========================

interface FurnitureItemProps {
  readonly product: FurnitureProduct
  readonly materials?: readonly FurnitureMaterial[]
  readonly selectedCollection?: string
  readonly materialQuantities?: Record<string, number>
  readonly onSelect?: (product: FurnitureProduct) => void
  readonly onCalculate?: (product: FurnitureProduct) => void
  readonly showDetails?: boolean
  readonly showPrice?: boolean
}

// ===========================
// üé® –û–°–ù–û–í–ù–û–ô –ö–û–ú–ü–û–ù–ï–ù–¢
// ===========================

/**
 * –ú–µ–º–æ–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —ç–ª–µ–º–µ–Ω—Ç–∞ –º–µ–±–µ–ª–∏
 * –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥ —Å —Ç–∏–ø–æ–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å—é
 */
export const FurnitureItem: React.FC<FurnitureItemProps> = React.memo(({
  product,
  materials = [],
  selectedCollection = '—Å—Ç–∞–Ω–¥–∞—Ä—Ç',
  materialQuantities = {},
  onSelect,
  onCalculate,
  showDetails = true,
  showPrice = true
}) => {
  // ===========================
  // üßÆ –†–ê–°–ß–ï–¢–´ –° –ú–ï–ú–û–ò–ó–ê–¶–ò–ï–ô
  // ===========================

  const { priceCalculation, materialsBreakdown, isRentable } = useFurnitureCalculations({
    materials,
    collections: [], // –ó–∞–≥–ª—É—à–∫–∞, –≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –∏–∑ –ø—Ä–æ–ø—Å–æ–≤
    basePrice: product.basePrice,
    selectedCollection,
    materialQuantities
  })

  /** –†–∞–∑–º–µ—Ä—ã –∏–∑–¥–µ–ª–∏—è */
  const dimensionsText = useMemo(() => {
    const { width, height, depth } = product.dimensions
    return `${width} √ó ${height} √ó ${depth} –º–º`
  }, [product.dimensions])

  /** –ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å –∏–∫–æ–Ω–∫–æ–π */
  const categoryInfo = useMemo(() => {
    const categoryIcons: Record<string, React.ReactNode> = {
      '—Å—Ç–æ–ª—ã': <Package className="w-4 h-4" />,
      '—Å—Ç—É–ª—å—è': <Package className="w-4 h-4" />,
      '—à–∫–∞—Ñ—ã': <Package className="w-4 h-4" />,
      '–∫—Ä–æ–≤–∞—Ç–∏': <Package className="w-4 h-4" />,
      '–∫–æ–º–æ–¥—ã': <Package className="w-4 h-4" />,
      '–¥—Ä—É–≥–æ–µ': <Package className="w-4 h-4" />
    }

    return {
      icon: categoryIcons[product.category] || <Package className="w-4 h-4" />,
      label: product.category.charAt(0).toUpperCase() + product.category.slice(1)
    }
  }, [product.category])

  /** –°—Ç–∞—Ç—É—Å —Ä–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç–∏ */
  const rentabilityBadge = useMemo(() => {
    if (!showPrice) return null

    return isRentable ? (
      <Badge variant="default" className="bg-green-100 text-green-800">
        –†–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ
      </Badge>
    ) : (
      <Badge variant="destructive" className="bg-red-100 text-red-800">
        –£–±—ã—Ç–æ—á–Ω–æ
      </Badge>
    )
  }, [isRentable, showPrice])

  // ===========================
  // üéõÔ∏è –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–ë–´–¢–ò–ô
  // ===========================

  const handleSelect = () => {
    onSelect?.(product)
  }

  const handleCalculate = () => {
    onCalculate?.(product)
  }

  // ===========================
  // üé® –†–ï–ù–î–ï–† –ö–û–ú–ü–û–ù–ï–ù–¢–ê
  // ===========================

  return (
    <Card 
      className={`
        transition-all duration-200 hover:shadow-md cursor-pointer
        ${!product.isActive ? 'opacity-60 bg-gray-50' : 'hover:shadow-lg'}
      `}
      onClick={handleSelect}
    >
      <CardHeader className="pb-3">
        <div className="flex items-start justify-between">
          <div className="flex-1">
            <CardTitle className="text-lg font-semibold text-gray-900 flex items-center gap-2">
              {categoryInfo.icon}
              {product.name}
            </CardTitle>
            
            <div className="flex items-center gap-2 mt-1">
              <Badge variant="outline" className="text-xs">
                <Tag className="w-3 h-3 mr-1" />
                {product.article}
              </Badge>
              
              {product.collection && (
                <Badge variant="secondary" className="text-xs">
                  {product.collection}
                </Badge>
              )}
              
              {!product.isActive && (
                <Badge variant="destructive" className="text-xs">
                  –ù–µ–∞–∫—Ç–∏–≤–Ω–æ
                </Badge>
              )}
            </div>
          </div>

          {showPrice && rentabilityBadge}
        </div>
      </CardHeader>

      <CardContent className="space-y-4">
        {/* –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
        {showDetails && (
          <div className="grid grid-cols-2 gap-4 text-sm">
            <div className="flex items-center gap-2 text-gray-600">
              <Ruler className="w-4 h-4" />
              <span>{dimensionsText}</span>
            </div>
            
            <div className="flex items-center gap-2 text-gray-600">
              <Package className="w-4 h-4" />
              <span>{categoryInfo.label}</span>
            </div>
          </div>
        )}

        {/* –û–ø–∏—Å–∞–Ω–∏–µ */}
        {product.description && showDetails && (
          <p className="text-sm text-gray-600 line-clamp-2">
            {product.description}
          </p>
        )}

        {/* –¶–µ–Ω–∞ –∏ —Ä–∞—Å—á–µ—Ç—ã */}
        {showPrice && (
          <div className="border-t pt-4">
            <div className="grid grid-cols-2 gap-4 text-sm">
              <div>
                <span className="text-gray-500">–ë–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞:</span>
                <div className="font-semibold">
                  {product.basePrice.toLocaleString('ru-RU')} ‚ÇΩ
                </div>
              </div>
              
              <div>
                <span className="text-gray-500">–ò—Ç–æ–≥–æ–≤–∞—è —Ü–µ–Ω–∞:</span>
                <div className="font-bold text-lg text-blue-600">
                  {priceCalculation.finalPrice.toLocaleString('ru-RU')} ‚ÇΩ
                </div>
              </div>
            </div>

            {materialsBreakdown.length > 0 && (
              <div className="mt-3">
                <span className="text-xs text-gray-500">
                  –ú–∞—Ç–µ—Ä–∏–∞–ª—ã: {materialsBreakdown.length} –ø–æ–∑., 
                  {priceCalculation.materialsCost.toLocaleString('ru-RU')} ‚ÇΩ
                </span>
              </div>
            )}
          </div>
        )}

        {/* –î–µ–π—Å—Ç–≤–∏—è */}
        <div className="flex gap-2 pt-2">
          {onSelect && (
            <Button
              variant="outline"
              size="sm"
              onClick={(e) => {
                e.stopPropagation()
                handleSelect()
              }}
              className="flex-1"
            >
              –í—ã–±—Ä–∞—Ç—å
            </Button>
          )}
          
          {onCalculate && showPrice && (
            <Button
              variant="default"
              size="sm"
              onClick={(e) => {
                e.stopPropagation()
                handleCalculate()
              }}
              className="flex items-center gap-1"
            >
              <Calculator className="w-4 h-4" />
              –†–∞—Å—á–µ—Ç
            </Button>
          )}
        </div>
      </CardContent>
    </Card>
  )
})

FurnitureItem.displayName = 'FurnitureItem'
