/**
 * @file components/Dashboard/DashboardContent.tsx
 * @description –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –¥–∞—à–±–æ—Ä–¥–∞ —Å –ª–µ–Ω–∏–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–æ–π –∏ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
 */

import React, { Suspense, useMemo } from 'react'
import { Loader2, AlertCircle, Lock } from 'lucide-react'
import type { TabDefinition } from '../../types/dashboard/types'
import { useDashboard } from '../../context/dashboard/DashboardContext'
import { Card, CardContent, CardHeader, CardTitle } from '../ui/card'
import { Button } from '../ui/button'

// ===========================
// üéØ –ò–ù–¢–ï–†–§–ï–ô–°–´
// ===========================

interface DashboardContentProps {
  readonly tabDefinitions: readonly TabDefinition[]
}

// ===========================
// üé® –°–õ–£–ñ–ï–ë–ù–´–ï –ö–û–ú–ü–û–ù–ï–ù–¢–´
// ===========================

const ComponentLoader: React.FC = React.memo(() => (
  <div className="flex items-center justify-center p-8">
    <Loader2 className="w-6 h-6 animate-spin text-blue-600" />
    <span className="ml-2 text-gray-600">–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞...</span>
  </div>
))

ComponentLoader.displayName = 'ComponentLoader'

const ErrorBoundaryFallback: React.FC<{ 
  error?: string 
  onRetry?: () => void 
}> = React.memo(({ error, onRetry }) => (
  <Card className="border-red-200 bg-red-50">
    <CardHeader>
      <CardTitle className="flex items-center gap-2 text-red-600">
        <AlertCircle className="w-5 h-5" />
        –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
      </CardTitle>
    </CardHeader>
    <CardContent>
      {error && (
        <p className="text-gray-600 mb-4 font-mono text-sm bg-white p-2 rounded border">
          {error}
        </p>
      )}
      {onRetry && (
        <Button onClick={onRetry} variant="outline" size="sm">
          –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
        </Button>
      )}
    </CardContent>
  </Card>
))

ErrorBoundaryFallback.displayName = 'ErrorBoundaryFallback'

const AccessDenied: React.FC = React.memo(() => (
  <Card className="border-yellow-200 bg-yellow-50">
    <CardHeader>
      <CardTitle className="flex items-center gap-2 text-yellow-600">
        <Lock className="w-5 h-5" />
        –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞
      </CardTitle>
    </CardHeader>
    <CardContent>
      <p className="text-gray-600">
        –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É 
        –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π.
      </p>
    </CardContent>
  </Card>
))

AccessDenied.displayName = 'AccessDenied'

const TabNotFound: React.FC = React.memo(() => (
  <Card>
    <CardContent className="p-8 text-center">
      <AlertCircle className="w-12 h-12 text-gray-400 mx-auto mb-4" />
      <h3 className="text-lg font-semibold text-gray-600 mb-2">–í–∫–ª–∞–¥–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞</h3>
      <p className="text-gray-500">
        –ó–∞–ø—Ä–æ—à–µ–Ω–Ω–∞—è –≤–∫–ª–∞–¥–∫–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞.
      </p>
    </CardContent>
  </Card>
))

TabNotFound.displayName = 'TabNotFound'

// ===========================
// üé® –û–°–ù–û–í–ù–û–ô –ö–û–ú–ü–û–ù–ï–ù–¢ –ö–û–ù–¢–ï–ù–¢–ê
// ===========================

export const DashboardContent: React.FC<DashboardContentProps> = React.memo(({ tabDefinitions }) => {
  const { state, isAdmin } = useDashboard()

  // –ú–µ–º–æ–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–∏—Å–∫ –∞–∫—Ç–∏–≤–Ω–æ–π –≤–∫–ª–∞–¥–∫–∏ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø—Ä–∞–≤
  const activeTab = useMemo(() => {
    const availableTabs = tabDefinitions.filter(tab => !tab.adminOnly || isAdmin)
    return availableTabs.find(tab => tab.key === state.activeTab) || availableTabs[0]
  }, [tabDefinitions, state.activeTab, isAdmin])

  // –ú–µ–º–æ–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞
  const accessCheck = useMemo(() => {
    if (!activeTab) return { hasAccess: false, reason: 'not-found' }
    if (activeTab.adminOnly && !isAdmin) return { hasAccess: false, reason: 'admin-required' }
    return { hasAccess: true, reason: null }
  }, [activeTab, isAdmin])

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏
  const handleRetry = React.useCallback(() => {
    window.location.reload()
  }, [])

  // –†–µ–Ω–¥–µ—Ä –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞
  if (!accessCheck.hasAccess) {
    if (accessCheck.reason === 'not-found') {
      return <TabNotFound />
    }
    if (accessCheck.reason === 'admin-required') {
      return <AccessDenied />
    }
  }

  if (!activeTab) {
    return <TabNotFound />
  }

  // –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ä–µ–Ω–¥–µ—Ä –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –∞–∫—Ç–∏–≤–Ω–æ–π –≤–∫–ª–∞–¥–∫–∏
  const ActiveComponent = activeTab.component

  return (
    <div className="space-y-6">
      {/* –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—à–∏–±–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è */}
      {state.error && (
        <ErrorBoundaryFallback 
          error={state.error} 
          onRetry={handleRetry}
        />
      )}
      
      {/* –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç —Å –≥—Ä–∞–Ω–∏—Ü–∞–º–∏ –æ—à–∏–±–æ–∫ */}
      <Suspense fallback={<ComponentLoader />}>
        <React.StrictMode>
          <ActiveComponent />
        </React.StrictMode>
      </Suspense>
    </div>
  )
})

DashboardContent.displayName = 'DashboardContent'
