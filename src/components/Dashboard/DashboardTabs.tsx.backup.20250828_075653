/**
 * @file components/Dashboard/DashboardTabs.tsx
 * @description –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –≤–∫–ª–∞–¥–∫–∞–º –¥–∞—à–±–æ—Ä–¥–∞
 */

import React, { useCallback } from 'react'
import { DashboardTab, TabDefinition } from '../../types/dashboard/types'
import { useDashboard } from '../../context/dashboard/DashboardContext'

// ===========================
# üéØ –ò–ù–¢–ï–†–§–ï–ô–°–´ –ö–û–ú–ü–û–ù–ï–ù–¢–û–í
# ===========================

interface TabButtonProps {
  readonly tab: TabDefinition
  readonly isActive: boolean
  readonly onClick: (key: DashboardTab) => void
}

interface DashboardTabsProps {
  readonly tabDefinitions: readonly TabDefinition[]
}

// ===========================
# üé® –ö–û–ú–ü–û–ù–ï–ù–¢ –ö–ù–û–ü–ö–ò –í–ö–õ–ê–î–ö–ò
# ===========================

const TabButton: React.FC<TabButtonProps> = React.memo(({ tab, isActive, onClick }) => {
  const handleClick = useCallback(() => {
    onClick(tab.key)
  }, [tab.key, onClick])

  return (
    <button
      type="button"
      onClick={handleClick}
      className={`
        inline-flex items-center gap-2 px-3 py-1.5 text-sm font-medium
        border rounded-md transition-all duration-200
        focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-blue-500
        ${
          isActive
            ? 'bg-blue-50 border-blue-200 text-blue-700 shadow-sm'
            : 'bg-white border-gray-200 text-gray-700 hover:bg-gray-50 hover:border-gray-300'
        }
      `}
      title={tab.description}
      aria-current={isActive ? 'page' : undefined}
    >
      {tab.icon}
      <span>{tab.label}</span>
    </button>
  )
})

TabButton.displayName = 'TabButton'

// ===========================
# üé® –û–°–ù–û–í–ù–û–ô –ö–û–ú–ü–û–ù–ï–ù–¢ –ù–ê–í–ò–ì–ê–¶–ò–ò
# ===========================

export const DashboardTabs: React.FC<DashboardTabsProps> = React.memo(({ tabDefinitions }) => {
  const { state, actions, isAdmin, metrics } = useDashboard()

  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –≤–∫–ª–∞–¥–æ–∫ –ø–æ –ø—Ä–∞–≤–∞–º –¥–æ—Å—Ç—É–ø–∞
  const availableTabs = React.useMemo(() => {
    return tabDefinitions.filter(tab => !tab.adminOnly || isAdmin)
  }, [tabDefinitions, isAdmin])

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–º–µ–Ω—ã –≤–∫–ª–∞–¥–∫–∏ —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏
  const handleTabChange = useCallback((tabKey: DashboardTab) => {
    const startTime = metrics.startTimer()
    
    actions.setActiveTab(tabKey)
    
    // –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    requestAnimationFrame(() => {
      metrics.endTimer(startTime, 'tabSwitch')
    })
  }, [actions, metrics])

  if (availableTabs.length === 0) {
    return null
  }

  return (
    <div className="mb-6">
      {/* –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –≤–∫–ª–∞–¥–∫–∞–º */}
      <div className="flex flex-wrap gap-2 mb-4">
        {availableTabs.map(tab => (
          <TabButton
            key={tab.key}
            tab={tab}
            isActive={tab.key === state.activeTab}
            onClick={handleTabChange}
          />
        ))}
      </div>

      {/* –•–ª–µ–±–Ω—ã–µ –∫—Ä–æ—à–∫–∏ */}
      <div className="flex items-center space-x-2 text-sm text-gray-600">
        <span>–ì–ª–∞–≤–Ω–∞—è</span>
        <span className="text-gray-400">/</span>
        <span className="font-medium text-gray-900">
          {availableTabs.find(tab => tab.key === state.activeTab)?.label || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞'}
        </span>
      </div>
    </div>
  )
})

DashboardTabs.displayName = 'DashboardTabs'
