/**
 * @file components/Dashboard/DashboardContent.tsx
 * @description –ö–æ–Ω—Ç–µ–Ω—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –≤–∫–ª–∞–¥–∫–∏ –¥–∞—à–±–æ—Ä–¥–∞
 */

import React, { Suspense } from 'react'
import { Loader2 } from 'lucide-react'
import { TabDefinition } from '../../types/dashboard/types'
import { useDashboard } from '../../context/dashboard/DashboardContext'
import { Card, CardContent, CardHeader, CardTitle } from '../ui/card'
import { Button } from '../ui/button'

// ===========================
# üéØ –ò–ù–¢–ï–†–§–ï–ô–°–´
# ===========================

interface DashboardContentProps {
  readonly tabDefinitions: readonly TabDefinition[]
}

// ===========================
# üé® –ö–û–ú–ü–û–ù–ï–ù–¢–´ –ó–ê–ì–†–£–ó–ö–ò –ò –û–®–ò–ë–û–ö
# ===========================

const ComponentLoader: React.FC = React.memo(() => (
  <div className="flex items-center justify-center p-8">
    <Loader2 className="w-6 h-6 animate-spin text-blue-600" />
    <span className="ml-2 text-gray-600">–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞...</span>
  </div>
))

ComponentLoader.displayName = 'ComponentLoader'

const ErrorBoundaryFallback: React.FC<{ error?: string; onRetry?: () => void }> = ({ error, onRetry }) => (
  <Card className="border-red-200 bg-red-50">
    <CardHeader>
      <CardTitle className="text-red-600">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞</CardTitle>
    </CardHeader>
    <CardContent>
      {error && <p className="text-gray-600 mb-4">{error}</p>}
      {onRetry && (
        <Button onClick={onRetry} variant="outline">
          –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
        </Button>
      )}
    </CardContent>
  </Card>
)

const AccessDenied: React.FC = () => (
  <Card className="border-yellow-200 bg-yellow-50">
    <CardHeader>
      <CardTitle className="text-yellow-600">–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞</CardTitle>
    </CardHeader>
    <CardContent>
      <p className="text-gray-600">
        –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.
      </p>
    </CardContent>
  </Card>
)

// ===========================
# üé® –û–°–ù–û–í–ù–û–ô –ö–û–ú–ü–û–ù–ï–ù–¢ –ö–û–ù–¢–ï–ù–¢–ê
# ===========================

export const DashboardContent: React.FC<DashboardContentProps> = React.memo(({ tabDefinitions }) => {
  const { state, isAdmin } = useDashboard()

  // –ù–∞–π—Ç–∏ –∞–∫—Ç–∏–≤–Ω—É—é –≤–∫–ª–∞–¥–∫—É
  const activeTab = React.useMemo(() => {
    const availableTabs = tabDefinitions.filter(tab => !tab.adminOnly || isAdmin)
    return availableTabs.find(tab => tab.key === state.activeTab) || availableTabs[0]
  }, [tabDefinitions, state.activeTab, isAdmin])

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞
  if (activeTab?.adminOnly && !isAdmin) {
    return <AccessDenied />
  }

  // –ï—Å–ª–∏ –≤–∫–ª–∞–¥–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
  if (!activeTab) {
    return (
      <Card>
        <CardContent className="p-8 text-center">
          <p className="text-gray-600">–í–∫–ª–∞–¥–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞</p>
        </CardContent>
      </Card>
    )
  }

  // –†–µ–Ω–¥–µ—Ä –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –∞–∫—Ç–∏–≤–Ω–æ–π –≤–∫–ª–∞–¥–∫–∏
  const ActiveComponent = activeTab.component

  return (
    <div className="space-y-6">
      <Suspense fallback={<ComponentLoader />}>
        <ActiveComponent />
      </Suspense>
    </div>
  )
})

DashboardContent.displayName = 'DashboardContent'
