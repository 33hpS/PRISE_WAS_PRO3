/**
 * @file context/dashboard/DashboardContext.tsx
 * @description –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–∞—à–±–æ—Ä–¥–∞ —Å —Ç–∏–ø–æ–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å—é –∏ –º–µ–º–æ–∏–∑–∞—Ü–∏–µ–π
 */

import React, { createContext, useContext, useState, useCallback, useMemo, useEffect, ReactNode } from 'react'
import type { DashboardState, UserWithRole, DashboardTab, DashboardStats } from '../../types/dashboard/types'

// ===========================
// üéØ –¢–ò–ü–´ –ö–û–ù–¢–ï–ö–°–¢–ê
// ===========================

interface DashboardContextValue {
  readonly state: DashboardState
  readonly isAdmin: boolean
  readonly actions: {
    readonly setLoading: (loading: boolean) => void
    readonly setUser: (user: UserWithRole | null) => void
    readonly setActiveTab: (tab: DashboardTab) => void
    readonly setStats: (stats: DashboardStats) => void
    readonly setError: (error: string | null) => void
    readonly initializeState: () => void
  }
  readonly metrics: {
    readonly data: {
      readonly loadTime: number
      readonly tabSwitchTime: number
      readonly lastUpdate: Date
    }
    readonly startTimer: () => number
    readonly endTimer: (startTime: number, operation: string) => number
  }
}

// ===========================
// üåê –ö–û–ù–¢–ï–ö–°–¢ –ò –ü–†–û–í–ê–ô–î–ï–†
// ===========================

const DashboardContext = createContext<DashboardContextValue | null>(null)

interface DashboardProviderProps {
  readonly children: ReactNode
}

export const DashboardProvider: React.FC<DashboardProviderProps> = React.memo(({ children }) => {
  // –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
  const [state, setState] = useState<DashboardState>(() => ({
    activeTab: 'overview',
    stats: { materials: 1248, products: 342, collections: 28, priceLists: 156 },
    statsLoading: false,
    user: null,
    loading: false,
    error: null
  }))

  // –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
  const [metrics, setMetrics] = useState({
    loadTime: 0,
    tabSwitchTime: 0,
    lastUpdate: new Date()
  })

  // ===========================
  // üîß –ú–ï–ú–û–ò–ó–ò–†–û–í–ê–ù–ù–´–ï –î–ï–ô–°–¢–í–ò–Ø
  // ===========================

  const actions = useMemo(() => ({
    setLoading: (loading: boolean) => {
      setState(prev => ({ ...prev, loading }))
    },
    
    setUser: (user: UserWithRole | null) => {
      setState(prev => ({ ...prev, user, loading: false }))
    },
    
    setActiveTab: (tab: DashboardTab) => {
      const startTime = performance.now()
      setState(prev => ({ ...prev, activeTab: tab }))
      
      // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ localStorage
      try {
        localStorage.setItem('wasser:dashboard:active-tab', tab)
      } catch (error) {
        console.warn('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ–π –≤–∫–ª–∞–¥–∫–∏:', error)
      }
      
      // –ú–µ—Ç—Ä–∏–∫–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è
      requestAnimationFrame(() => {
        const endTime = performance.now()
        const switchTime = endTime - startTime
        setMetrics(prev => ({
          ...prev,
          tabSwitchTime: switchTime,
          lastUpdate: new Date()
        }))
      })
    },
    
    setStats: (stats: DashboardStats) => {
      setState(prev => ({ ...prev, stats: { ...stats, lastUpdated: new Date() } }))
    },
    
    setError: (error: string | null) => {
      setState(prev => ({ ...prev, error, loading: false }))
    },
    
    initializeState: () => {
      // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–π –≤–∫–ª–∞–¥–∫–∏
      try {
        const savedTab = localStorage.getItem('wasser:dashboard:active-tab') as DashboardTab
        if (savedTab) {
          setState(prev => ({ ...prev, activeTab: savedTab }))
        }
      } catch (error) {
        console.warn('–û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è:', error)
      }
      
      // –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ localStorage
      try {
        const testUser = localStorage.getItem('test-user')
        if (testUser) {
          const parsed = JSON.parse(testUser)
          if (parsed?.authenticated) {
            setState(prev => ({ ...prev, user: {
              id: parsed.id || 'test-user',
              email: parsed.email || 'admin@wasser.com',
              role: parsed.role || 'admin',
              name: parsed.name
            }}))
          }
        }
      } catch (error) {
        console.warn('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error)
      }
    }
  }), [])

  // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö –ø—Ä–∞–≤
  const isAdmin = useMemo(() => {
    if (!state.user) return false
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ–ª–∏
    if (state.user.role === 'admin') return true
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ email
    const adminEmails = ['admin@wasser.com', 'sherhan1988hp@gmail.com']
    if (state.user.email && adminEmails.includes(state.user.email)) return true
    
    return false
  }, [state.user])

  // –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
  const metricsActions = useMemo(() => ({
    data: metrics,
    startTimer: () => performance.now(),
    endTimer: (startTime: number, operation: string) => {
      const duration = performance.now() - startTime
      setMetrics(prev => ({
        ...prev,
        [operation === 'load' ? 'loadTime' : 'tabSwitchTime']: duration,
        lastUpdate: new Date()
      }))
      console.log(`‚ö° Dashboard ${operation}: ${duration.toFixed(2)}ms`)
      return duration
    }
  }), [metrics])

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    const initTimer = performance.now()
    actions.initializeState()
    
    // –ú–µ—Ç—Ä–∏–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏
    requestAnimationFrame(() => {
      metricsActions.endTimer(initTimer, 'load')
    })
  }, [actions, metricsActions])

  const contextValue: DashboardContextValue = useMemo(() => ({
    state,
    isAdmin,
    actions,
    metrics: metricsActions
  }), [state, isAdmin, actions, metricsActions])

  return (
    <DashboardContext.Provider value={contextValue}>
      {children}
    </DashboardContext.Provider>
  )
})

DashboardProvider.displayName = 'DashboardProvider'

// ===========================
// üé£ –•–£–ö –î–õ–Ø –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø –ö–û–ù–¢–ï–ö–°–¢–ê
// ===========================

export const useDashboard = (): DashboardContextValue => {
  const context = useContext(DashboardContext)
  
  if (!context) {
    throw new Error('useDashboard –¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤–Ω—É—Ç—Ä–∏ DashboardProvider')
  }
  
  return context
}
