/**
 * @file context/DashboardContext.tsx
 * @description React Context –¥–ª—è –¥–∞—à–±–æ—Ä–¥–∞ —Å —Ç–∏–ø–æ–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å—é
 */

import React, { createContext, useContext, useEffect, ReactNode } from 'react'
import { DashboardState, UserWithRole } from '../types/dashboard/types'
import { useDashboardState, usePerformanceMetrics } from '../hooks/dashboard/useDashboardState'
import { useUserPermissions } from '../hooks/dashboard/useUserPermissions'
import { getCurrentUserWithRole } from '../lib/auth'

// ===========================
# üéØ –¢–ò–ü–´ –ö–û–ù–¢–ï–ö–°–¢–ê
# ===========================

interface DashboardContextValue {
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ
  readonly state: DashboardState
  readonly isAdmin: boolean
  readonly availableTabs: readonly string[]

  // –î–µ–π—Å—Ç–≤–∏—è
  readonly actions: {
    readonly setLoading: (loading: boolean) => void
    readonly setUser: (user: UserWithRole | null) => void
    readonly setActiveTab: (tab: string) => void
    readonly setStats: (stats: any) => void
    readonly setError: (error: string | null) => void
    readonly setStatsLoading: (loading: boolean) => void
    readonly initializeState: () => void
  }

  // –ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
  readonly permissions: {
    readonly hasPermission: (feature: string) => boolean
    readonly canAccessTab: (tab: string) => boolean
    readonly diagnostics: any
  }

  // –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
  readonly metrics: {
    readonly data: any
    readonly startTimer: () => number
    readonly endTimer: (startTime: number, operation: string) => number
    readonly logMetrics: () => void
  }
}

// ===========================
# üåê –ö–û–ù–¢–ï–ö–°–¢ –ò –ü–†–û–í–ê–ô–î–ï–†
# ===========================

const DashboardContext = createContext<DashboardContextValue | null>(null)

interface DashboardProviderProps {
  readonly children: ReactNode
}

export const DashboardProvider: React.FC<DashboardProviderProps> = ({ children }) => {
  // –•—É–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
  const { state, actions } = useDashboardState()
  const permissions = useUserPermissions(state.user)
  const performanceMetrics = usePerformanceMetrics()

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    const initTimer = performanceMetrics.startTimer()
    
    const initializeAsync = async () => {
      try {
        // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–∑ localStorage
        actions.initializeState()

        // –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const user = await getCurrentUserWithRole()
        if (user) {
          actions.setUser(user)
        }
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–∞—à–±–æ—Ä–¥–∞:', error)
        actions.setError('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏')
      } finally {
        performanceMetrics.endTimer(initTimer, 'load')
      }
    }

    initializeAsync()
  }, [actions, performanceMetrics])

  // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ dev —Ä–µ–∂–∏–º–µ
  useEffect(() => {
    if (process.env.NODE_ENV === 'development') {
      console.group('üéØ Dashboard Context Update')
      console.log('State:', state)
      console.log('Is Admin:', permissions.isAdmin)
      console.log('Available Tabs:', permissions.availableTabs.length)
      console.groupEnd()
    }
  }, [state, permissions])

  const contextValue: DashboardContextValue = {
    state,
    isAdmin: permissions.isAdmin,
    availableTabs: permissions.availableTabs,
    actions,
    permissions: {
      hasPermission: permissions.hasPermission,
      canAccessTab: permissions.canAccessTab,
      diagnostics: permissions.diagnostics
    },
    metrics: {
      data: performanceMetrics.metrics,
      startTimer: performanceMetrics.startTimer,
      endTimer: performanceMetrics.endTimer,
      logMetrics: performanceMetrics.logMetrics
    }
  }

  return (
    <DashboardContext.Provider value={contextValue}>
      {children}
    </DashboardContext.Provider>
  )
}

// ===========================
# üé£ –•–£–ö –î–õ–Ø –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø –ö–û–ù–¢–ï–ö–°–¢–ê
# ===========================

export const useDashboard = (): DashboardContextValue => {
  const context = useContext(DashboardContext)
  
  if (!context) {
    throw new Error('useDashboard –¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤–Ω—É—Ç—Ä–∏ DashboardProvider')
  }
  
  return context
}

// ===========================
# üéØ HOC –î–õ–Ø –û–ë–ï–†–¢–ö–ò –ö–û–ú–ü–û–ù–ï–ù–¢–û–í
# ===========================

export function withDashboard<P extends object>(
  Component: React.ComponentType<P>
): React.FC<P> {
  const WrappedComponent = (props: P) => {
    const dashboard = useDashboard()
    return <Component {...props} dashboard={dashboard} />
  }
  
  WrappedComponent.displayName = `withDashboard(${Component.displayName || Component.name})`
  return WrappedComponent
}

// ===========================
# üõ°Ô∏è –ö–û–ú–ü–û–ù–ï–ù–¢ –ó–ê–©–ò–¢–´ –ú–ê–†–®–†–£–¢–û–í
# ===========================

interface RouteGuardProps {
  readonly children: ReactNode
  readonly requireAdmin?: boolean
  readonly requiredPermission?: string
  readonly fallback?: ReactNode
}

export const RouteGuard: React.FC<RouteGuardProps> = ({
  children,
  requireAdmin = false,
  requiredPermission,
  fallback = <div>–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞</div>
}) => {
  const { isAdmin, permissions } = useDashboard()

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö –ø—Ä–∞–≤
  if (requireAdmin && !isAdmin) {
    return <>{fallback}</>
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
  if (requiredPermission && !permissions.hasPermission(requiredPermission)) {
    return <>{fallback}</>
  }

  return <>{children}</>
}
