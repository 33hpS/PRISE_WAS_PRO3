/**
 * @file services/storage.ts
 * @description –¢–∏–ø–æ–±–µ–∑–æ–ø–∞—Å–Ω—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å localStorage
 */

import { DashboardTab, UserWithRole } from '../types/dashboard/types'

// ===========================
//üîë –ö–õ–Æ–ß–ò –õ–û–ö–ê–õ–¨–ù–û–ì–û –•–†–ê–ù–ò–õ–ò–©–ê
//===========================

const STORAGE_KEYS = {
  ACTIVE_TAB: 'wasser:dashboard:active-tab',
  USER_PREFERENCES: 'wasser:user:preferences',
  CACHE_STATS: 'wasser:cache:stats',
  THEME: 'wasser:theme',
  TEST_USER: 'test-user',
  SUPABASE_USER: 'supabase-user'
} as const

type StorageKey = typeof STORAGE_KEYS[keyof typeof STORAGE_KEYS]

// ===========================
//üèóÔ∏è –¢–ò–ü–û–ë–ï–ó–û–ü–ê–°–ù–´–ô –°–ï–†–í–ò–° –•–†–ê–ù–ò–õ–ò–©–ê
//===========================

class WasserStorage {
  /**
   * –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —á—Ç–µ–Ω–∏–µ –∏–∑ localStorage —Å —Ç–∏–ø–∏–∑–∞—Ü–∏–µ–π
   */
  private static safeGet<T>(key: StorageKey): T | null {
    try {
      const item = localStorage.getItem(key)
      return item ? JSON.parse(item) : null
    } catch (error) {
      console.warn(`–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è ${key} –∏–∑ localStorage:`, error)
      return null
    }
  }

  /**
   * –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∑–∞–ø–∏—Å—å –≤ localStorage
   */
  private static safeSet<T>(key: StorageKey, value: T): void {
    try {
      localStorage.setItem(key, JSON.stringify(value))
    } catch (error) {
      console.error(`–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ ${key} –≤ localStorage:`, error)
    }
  }

  /**
   * –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –∏–∑ localStorage
   */
  private static safeRemove(key: StorageKey): void {
    try {
      localStorage.removeItem(key)
    } catch (error) {
      console.warn(`–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è ${key} –∏–∑ localStorage:`, error)
    }
  }

  // ===========================
//üéØ –ú–ï–¢–û–î–´ –î–õ–Ø –î–ê–®–ë–û–†–î–ê
//===========================

  /** –ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—É—é –≤–∫–ª–∞–¥–∫—É */
  static getActiveTab(): DashboardTab | null {
    return this.safeGet<DashboardTab>(STORAGE_KEYS.ACTIVE_TAB)
  }

  /** –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—É—é –≤–∫–ª–∞–¥–∫—É */
  static setActiveTab(tab: DashboardTab): void {
    this.safeSet(STORAGE_KEYS.ACTIVE_TAB, tab)
  }

  /** –ü–æ–ª—É—á–∏—Ç—å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É */
  static getCachedStats(): any {
    return this.safeGet(STORAGE_KEYS.CACHE_STATS)
  }

  /** –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ –∫–µ—à */
  static setCachedStats(stats: any, ttl: number = 300000): void {
    const cacheEntry = {
      data: stats,
      timestamp: Date.now(),
      ttl
    }
    this.safeSet(STORAGE_KEYS.CACHE_STATS, cacheEntry)
  }

  /** –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∫–µ—à–∞ */
  static isCacheValid(cacheKey: StorageKey): boolean {
    const cache = this.safeGet<{timestamp: number, ttl: number}>(cacheKey)
    if (!cache) return false
    
    return (Date.now() - cache.timestamp) < cache.ttl
  }

  // ===========================
//üë§ –ú–ï–¢–û–î–´ –î–õ–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô  
//===========================

  /** –ü–æ–ª—É—á–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è */
  static getTestUser(): UserWithRole | null {
    const testUser = this.safeGet<any>(STORAGE_KEYS.TEST_USER)
    if (!testUser?.authenticated) return null
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è —Å–µ—Å—Å–∏–∏ (7 –¥–Ω–µ–π)
    const sessionAge = Date.now() - (testUser.timestamp || 0)
    const maxAge = 7 * 24 * 60 * 60 * 1000
    
    if (sessionAge > maxAge) {
      this.safeRemove(STORAGE_KEYS.TEST_USER)
      return null
    }
    
    return {
      id: testUser.id,
      email: testUser.email,
      role: testUser.role,
      name: testUser.name
    }
  }

  /** –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Supabase */
  static getSupabaseUser(): UserWithRole | null {
    const supabaseUser = this.safeGet<any>(STORAGE_KEYS.SUPABASE_USER)
    if (!supabaseUser?.role) return null
    
    return {
      id: supabaseUser.id,
      email: supabaseUser.email,
      role: supabaseUser.role,
      name: supabaseUser.name
    }
  }

  /** –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ */
  static setUserPreferences(preferences: Record<string, any>): void {
    this.safeSet(STORAGE_KEYS.USER_PREFERENCES, preferences)
  }

  /** –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ */
  static getUserPreferences(): Record<string, any> {
    return this.safeGet(STORAGE_KEYS.USER_PREFERENCES) || {}
  }

  // ===========================
//üßπ –°–õ–£–ñ–ï–ë–ù–´–ï –ú–ï–¢–û–î–´
//===========================

  /** –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –¥–∞—à–±–æ—Ä–¥–∞ */
  static clearDashboardData(): void {
    const keysToRemove = [
      STORAGE_KEYS.ACTIVE_TAB,
      STORAGE_KEYS.CACHE_STATS,
      STORAGE_KEYS.USER_PREFERENCES
    ]
    
    keysToRemove.forEach(key => this.safeRemove(key))
  }

  /** –û—á–∏—Å—Ç–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ */
  static clearAuthData(): void {
    const authKeys = [
      STORAGE_KEYS.TEST_USER,
      STORAGE_KEYS.SUPABASE_USER
    ]
    
    authKeys.forEach(key => this.safeRemove(key))
  }

  /** –ü–æ–ª—É—á–∏—Ç—å —Ä–∞–∑–º–µ—Ä –∏—Å–ø–æ–ª—å–∑—É–µ–º–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ */
  static getStorageSize(): number {
    let total = 0
    for (const key in localStorage) {
      if (localStorage.hasOwnProperty(key)) {
        total += localStorage[key].length + key.length
      }
    }
    return Math.round(total / 1024) // –≤ KB
  }

  /** –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ */
  static getDiagnostics(): Record<string, any> {
    return {
      storageSize: `${this.getStorageSize()} KB`,
      activeTab: this.getActiveTab(),
      cacheValid: this.isCacheValid(STORAGE_KEYS.CACHE_STATS),
      hasTestUser: !!this.getTestUser(),
      hasSupabaseUser: !!this.getSupabaseUser(),
      timestamp: new Date().toISOString()
    }
  }
}

export { WasserStorage as DashboardStorage, STORAGE_KEYS }

