/**
 * @file forex.ts - –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –º–æ–¥—É–ª—å –≤–∞–ª—é—Ç–Ω—ã—Ö –∫—É—Ä—Å–æ–≤ –¥–ª—è –º–µ–±–µ–ª—å–Ω–æ–π —Ñ–∞–±—Ä–∏–∫–∏ WASSER
 * –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: –¢–∏–ø–æ–±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã + –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ + error handling
 */

export type CurrencyCode = 'USD' | 'EUR' | 'RUB' | 'KGS' | 'KZT' | 'CNY'
export type BaseCurrency = 'KGS' | 'USD'

// –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –∫—É—Ä—Å–∞
export interface NormalizedRate {
  code: string
  name: string
  rate: number
}

// –¢–∏–ø–æ–±–µ–∑–æ–ø–∞—Å–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å API –æ—Ç–≤–µ—Ç–∞
interface ApiResponse {
  result: 'success' | 'error'
  base_code: string
  rates: Record<string, number>
}

// –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∫—ç—à —Å —Ç–∏–ø–∏–∑–∞—Ü–∏–µ–π
interface CacheEntry {
  timestamp: number
  data: NormalizedRate[]
  base: BaseCurrency
}

// –ú–µ—Ç–∞-–¥–∞–Ω–Ω—ã–µ –≤–∞–ª—é—Ç –¥–ª—è –º–µ–±–µ–ª—å–Ω–æ–π —Ñ–∞–±—Ä–∏–∫–∏
const CURRENCY_META: Record<string, { name: string; flag: string }> = {
  USD: { name: '–î–æ–ª–ª–∞—Ä –°–®–ê', flag: 'üá∫üá∏' },
  EUR: { name: '–ï–≤—Ä–æ', flag: 'üá™üá∫' },
  RUB: { name: '–†–æ—Å—Å–∏–π—Å–∫–∏–π —Ä—É–±–ª—å', flag: 'üá∑üá∫' },
  KGS: { name: '–ö–∏—Ä–≥–∏–∑—Å–∫–∏–π —Å–æ–º', flag: 'üá∞üá¨' },
  KZT: { name: '–ö–∞–∑–∞—Ö—Å–∫–∏–π —Ç–µ–Ω–≥–µ', flag: 'üá∞üáø' },
  CNY: { name: '–ö–∏—Ç–∞–π—Å–∫–∏–π —é–∞–Ω—å', flag: 'üá®üá≥' },
}

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
const CACHE_KEY = 'wasser-forex-cache'
const CACHE_TTL = 10 * 60 * 1000 // 10 –º–∏–Ω—É—Ç

/**
 * –¢–∏–ø–æ–±–µ–∑–æ–ø–∞—Å–Ω–æ–µ —á—Ç–µ–Ω–∏–µ –∏–∑ –∫—ç—à–∞
 */
const readCache = (base: BaseCurrency): CacheEntry | null => {
  try {
    const cached = localStorage.getItem(`${CACHE_KEY}-${base}`)
    if (!cached) return null

    const entry: CacheEntry = JSON.parse(cached)
    if (Date.now() - entry.timestamp > CACHE_TTL) return null

    return entry
  } catch {
    return null
  }
}

/**
 * –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –∑–∞–ø–∏—Å—å –≤ –∫—ç—à
 */
const writeCache = (base: BaseCurrency, data: NormalizedRate[]): void => {
  const entry: CacheEntry = {
    timestamp: Date.now(),
    data,
    base,
  }

  try {
    localStorage.setItem(`${CACHE_KEY}-${base}`, JSON.stringify(entry))
  } catch {
    // –ö—ç—à –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª–µ–Ω, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏
  }
}

/**
 * –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∫—É—Ä—Å–æ–≤
 */
const normalizeRates = (baseCode: string, apiRates: Record<string, number>): NormalizedRate[] => {
  const targetCurrencies = ['USD', 'EUR', 'RUB', 'KGS', 'KZT', 'CNY']

  return targetCurrencies
    .filter(code => code !== baseCode && apiRates[code])
    .map(code => ({
      code,
      name: CURRENCY_META[code]?.name || code,
      rate: apiRates[code],
    }))
    .sort((a, b) => a.code.localeCompare(b.code))
}

/**
 * –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ getRates - —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –∫ –ø–æ–ª—É—á–µ–Ω–∏—é –∫—É—Ä—Å–æ–≤
 */
export const getRates = async (base: BaseCurrency = 'USD'): Promise<NormalizedRate[]> => {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
  const cached = readCache(base)
  if (cached) {
    return cached.data
  }

  try {
    const response = await fetch(`https://open.er-api.com/v6/latest/${base}`)

    if (!response.ok) {
      throw new Error(`API error: ${response.status}`)
    }

    const data: ApiResponse = await response.json()

    if (data.result !== 'success' || !data.rates) {
      throw new Error('Invalid API response')
    }

    const normalized = normalizeRates(base, data.rates)
    writeCache(base, normalized)

    return normalized
  } catch (error) {
    // –ü—Ä–∏ –æ—à–∏–±–∫–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
    console.warn('Forex API error, returning fallback rates:', error)
    return getFallbackRates(base)
  }
}

/**
 * –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∑–∞–≥–ª—É—à–∫–∏ –∫—É—Ä—Å–æ–≤ –¥–ª—è –æ—Ñ—Ñ–ª–∞–π–Ω —Ä–∞–±–æ—Ç—ã
 */
const getFallbackRates = (base: BaseCurrency): NormalizedRate[] => {
  const fallbackRates =
    base === 'USD'
      ? [
          { code: 'EUR', name: '–ï–≤—Ä–æ', rate: 0.85 },
          { code: 'RUB', name: '–†–æ—Å—Å–∏–π—Å–∫–∏–π —Ä—É–±–ª—å', rate: 75.0 },
          { code: 'KGS', name: '–ö–∏—Ä–≥–∏–∑—Å–∫–∏–π —Å–æ–º', rate: 85.0 },
          { code: 'KZT', name: '–ö–∞–∑–∞—Ö—Å–∫–∏–π —Ç–µ–Ω–≥–µ', rate: 450.0 },
        ]
      : [
          { code: 'USD', name: '–î–æ–ª–ª–∞—Ä –°–®–ê', rate: 0.012 },
          { code: 'EUR', name: '–ï–≤—Ä–æ', rate: 0.01 },
          { code: 'RUB', name: '–†–æ—Å—Å–∏–π—Å–∫–∏–π —Ä—É–±–ª—å', rate: 0.88 },
        ]

  return fallbackRates
}

/**
 * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å –æ—á–∏—Å—Ç–∫–æ–π –∫—ç—à–∞
 */
export const refreshRates = async (base: BaseCurrency = 'USD'): Promise<NormalizedRate[]> => {
  localStorage.removeItem(`${CACHE_KEY}-${base}`)
  return getRates(base)
}

/**
 * –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å —É—Å—Ç–∞—Ä–µ–≤—à–∏–º–∏ –≤—ã–∑–æ–≤–∞–º–∏
 */
export const fetchRates = getRates
export const fetchKgsRates = () => getRates('KGS')
export const refreshKgsRates = () => refreshRates('KGS')
